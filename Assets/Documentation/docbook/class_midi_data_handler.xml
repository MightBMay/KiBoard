<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_midi_data_handler" xml:lang="en-US">
<title>MidiDataHandler Class Reference</title>
<indexterm><primary>MidiDataHandler</primary></indexterm>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> <link linkend="_class_midi_data_handler_1a1a86dcda7551933ae1bad4ed606bc88a">GetJSONData</link> (string fileName)</para>

<para>Retrieves stored MIDI data from a JSON file. </para>
</listitem>
            <listitem><para>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> <link linkend="_class_midi_data_handler_1a2f657c39727c406846f224d4175f62b2">SaveNoteEventData</link> (string extension, float bpm, List&lt; <link linkend="_class_note_event_info">NoteEventInfo</link> &gt; dataToSave)</para>

<para>Saves <link linkend="_class_note_event_info">NoteEventInfo</link> data to a JSON file. </para>
</listitem>
            <listitem><para>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> <link linkend="_class_midi_data_handler_1aa987cf5e013d593eacef15c209a6ddf4">SaveNoteEventData</link> (string extension, <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> wrapper)</para>

<para>ONLY USE FOR REPLAYS UNLESS MODIFIED. </para>
</listitem>
            <listitem><para>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> <link linkend="_class_midi_data_handler_1aaadc48d0f8cf053388f813d8624d696d">LoadNoteEventData</link> (string filePath)</para>

<para>Loads <link linkend="_class_note_event_info">NoteEventInfo</link> data from a JSON file. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>static void <link linkend="_class_midi_data_handler_1a41c5630a1a4ef4b89a1e14f7474a57ca">SaveToFileCompressed</link> (string data, string filePath)</para>

<para>Saves json string &quot;Data&quot; to a compressed json file at &quot;filePath&quot;. </para>
</listitem>
            <listitem><para>static string <link linkend="_class_midi_data_handler_1ad0ce8e8e7c9077e798469067e598bcc3">LoadFromFileCompressed</link> (string filePath)</para>

<para>loads a json string from a compressed json file at &quot;filePath&quot;. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_midi_data_handler_1a1a86dcda7551933ae1bad4ed606bc88a"/><section>
    <title>GetJSONData()</title>
<indexterm><primary>GetJSONData</primary><secondary>MidiDataHandler</secondary></indexterm>
<indexterm><primary>MidiDataHandler</primary><secondary>GetJSONData</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> MidiDataHandler.GetJSONData (string fileName)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Retrieves stored MIDI data from a JSON file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>fileName</entry><entry>
<para>The name of the JSON file to load.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The loaded MIDI data as a <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link>.</para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">16 &#32;&#32;&#32;&#32;{
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Load&#32;the&#32;previously&#32;stored&#32;data</emphasis>
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;loaded&#32;data</emphasis>
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_midi_data_handler_1aaadc48d0f8cf053388f813d8624d696d">LoadNoteEventData</link>(fileName);
20 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_read_file_1a3958dca282906c32680b969cd5e6273f">MidiReadFile.GetDataFile()</link>.</para>
</section>
<anchor xml:id="_class_midi_data_handler_1ad0ce8e8e7c9077e798469067e598bcc3"/><section>
    <title>LoadFromFileCompressed()</title>
<indexterm><primary>LoadFromFileCompressed</primary><secondary>MidiDataHandler</secondary></indexterm>
<indexterm><primary>MidiDataHandler</primary><secondary>LoadFromFileCompressed</secondary></indexterm>
<para><computeroutput>static string MidiDataHandler.LoadFromFileCompressed (string filePath)<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>loads a json string from a compressed json file at &quot;filePath&quot;. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filePath</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>decomressed Json String</para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">142 &#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(FileStream&#32;fileStream&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;FileStream(filePath,&#32;FileMode.Open))
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(GZipStream&#32;zipStream&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;GZipStream(fileStream,&#32;CompressionMode.Decompress))
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(StreamReader&#32;reader&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StreamReader(zipStream))
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;reader.ReadToEnd();
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
153 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_data_handler_1aaadc48d0f8cf053388f813d8624d696d">LoadNoteEventData()</link>.</para>
</section>
<anchor xml:id="_class_midi_data_handler_1aaadc48d0f8cf053388f813d8624d696d"/><section>
    <title>LoadNoteEventData()</title>
<indexterm><primary>LoadNoteEventData</primary><secondary>MidiDataHandler</secondary></indexterm>
<indexterm><primary>MidiDataHandler</primary><secondary>LoadNoteEventData</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> MidiDataHandler.LoadNoteEventData (string filePath)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Loads <link linkend="_class_note_event_info">NoteEventInfo</link> data from a JSON file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>fileName</entry><entry>
<para>The name of the JSON file to load.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The loaded MIDI data as a <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link>.</para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">100 &#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;file&#32;exists</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(File.Exists(filePath))
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;the&#32;JSON&#32;string&#32;from&#32;the&#32;file</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;json&#32;=&#32;<link linkend="_class_midi_data_handler_1ad0ce8e8e7c9077e798469067e598bcc3">LoadFromFileCompressed</link>(filePath);
106 
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;the&#32;JSON&#32;string&#32;back&#32;to&#32;a&#32;list&#32;of&#32;NoteEventInfo</emphasis>
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;JsonUtility.FromJson&lt;<link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link>&gt;(json);
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogWarning(<emphasis role="stringliteral">&quot;Note&#32;event&#32;data&#32;file&#32;does&#32;not&#32;exist.&quot;</emphasis>);
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
115 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_data_handler_1a1a86dcda7551933ae1bad4ed606bc88a">GetJSONData()</link>.</para>
</section>
<anchor xml:id="_class_midi_data_handler_1a2f657c39727c406846f224d4175f62b2"/><section>
    <title>SaveNoteEventData()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>SaveNoteEventData</primary><secondary>MidiDataHandler</secondary></indexterm>
<indexterm><primary>MidiDataHandler</primary><secondary>SaveNoteEventData</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> MidiDataHandler.SaveNoteEventData (string extension, float bpm, List&lt; <link linkend="_class_note_event_info">NoteEventInfo</link> &gt; dataToSave)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Saves <link linkend="_class_note_event_info">NoteEventInfo</link> data to a JSON file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>fileName</entry><entry>
<para>The name of the JSON file to save.</para>
</entry>
                            </row>
                            <row>
<entry>bpm</entry><entry>
<para>The BPM (Beats Per Minute) of the song.</para>
</entry>
                            </row>
                            <row>
<entry>dataToSave</entry><entry>
<para>The list of <link linkend="_class_note_event_info">NoteEventInfo</link> to save.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The wrapper containing BPM and <link linkend="_class_note_event_info">NoteEventInfo</link>.</para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">30 &#32;&#32;&#32;&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dataToSave&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{&#32;Debug.LogError(<emphasis role="stringliteral">&quot;Data&#32;Save&#32;Error:&#32;NoteEventInfo&#32;Null&quot;</emphasis>);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;&#32;}
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;wrapper&#32;class&#32;to&#32;hold&#32;both&#32;BPM&#32;and&#32;NoteEventInfo</emphasis>
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;wrapper&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link>
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BPM&#32;=&#32;bpm,
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NoteEvents&#32;=&#32;dataToSave
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
38 
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;the&#32;wrapper&#32;to&#32;a&#32;JSON&#32;string</emphasis>
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;json&#32;=&#32;JsonUtility.ToJson(wrapper);
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;folderPath&#32;=&#32;GameSettings.currentFileGroup.FolderPath;
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fileName&#32;=&#32;Path.GetFileNameWithoutExtension(GameSettings.currentSongPath);
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Define&#32;the&#32;path&#32;where&#32;you&#32;want&#32;to&#32;save&#32;the&#32;JSON&#32;file</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Directory.Exists(folderPath))
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{&#32;Directory.CreateDirectory(folderPath);&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;{&#32;}
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
48 
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;the&#32;JSON&#32;string&#32;to&#32;the&#32;file</emphasis>
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_data_handler_1a41c5630a1a4ef4b89a1e14f7474a57ca">SaveToFileCompressed</link>(json,&#32;folderPath&#32;+&#32;<emphasis role="stringliteral">&quot;/&quot;</emphasis>&#32;+fileName+&#32;extension);
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wrapper;
52 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_game_manager_1ad109ae0452de271ad4ea6f05e7a7d74b">GameManager.OnSongEnd()</link>, <link linkend="_class_midi_read_file_1a35980f4407241b68d3ec79bbd87cc153">MidiReadFile.ReadMidiFile()</link>, and <link linkend="_class_game_manager_1a4138c16110d65a2c6abdafa36fb0d99a">GameManager.RefreshJsonFiles()</link>.</para>
</section>
<anchor xml:id="_class_midi_data_handler_1aa987cf5e013d593eacef15c209a6ddf4"/><section>
    <title>SaveNoteEventData()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>SaveNoteEventData</primary><secondary>MidiDataHandler</secondary></indexterm>
<indexterm><primary>MidiDataHandler</primary><secondary>SaveNoteEventData</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> MidiDataHandler.SaveNoteEventData (string extension, <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> wrapper)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>ONLY USE FOR REPLAYS UNLESS MODIFIED. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>extension</entry><entry></entry>
                            </row>
                            <row>
<entry>wrapper</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">60 &#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wrapper&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{&#32;Debug.LogError(<emphasis role="stringliteral">&quot;Data&#32;Save&#32;Error:&#32;NoteEventDataWrapper&#32;Null&quot;</emphasis>);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;&#32;}
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;wrapper&#32;class&#32;to&#32;hold&#32;both&#32;BPM&#32;and&#32;NoteEventInfo</emphasis>
63 
64 
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;the&#32;wrapper&#32;to&#32;a&#32;JSON&#32;string</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;json&#32;=&#32;JsonUtility.ToJson(wrapper);
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;folderPath&#32;=&#32;GameSettings.currentFileGroup.FolderPath;
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fileName&#32;=&#32;Path.GetFileNameWithoutExtension(GameSettings.currentSongPath);
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Define&#32;the&#32;path&#32;where&#32;you&#32;want&#32;to&#32;save&#32;the&#32;JSON&#32;file</emphasis>
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Directory.Exists(folderPath))
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Directory.CreateDirectory(folderPath);
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;versionCount&#32;=&#32;0;
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!File.Exists($<emphasis role="stringliteral">&quot;{folderPath}/{fileName}_{versionCount}{extension}&quot;</emphasis>))
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_data_handler_1a41c5630a1a4ef4b89a1e14f7474a57ca">SaveToFileCompressed</link>(json,&#32;$<emphasis role="stringliteral">&quot;{folderPath}/{fileName}_{versionCount}{extension}&quot;</emphasis>);
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wrapper;
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
84 
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;versionCount++;
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;the&#32;JSON&#32;string&#32;to&#32;the&#32;file</emphasis>
90 
91 
92 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_midi_data_handler_1a41c5630a1a4ef4b89a1e14f7474a57ca"/><section>
    <title>SaveToFileCompressed()</title>
<indexterm><primary>SaveToFileCompressed</primary><secondary>MidiDataHandler</secondary></indexterm>
<indexterm><primary>MidiDataHandler</primary><secondary>SaveToFileCompressed</secondary></indexterm>
<para><computeroutput>static void MidiDataHandler.SaveToFileCompressed (string data, string filePath)<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Saves json string &quot;Data&quot; to a compressed json file at &quot;filePath&quot;. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry></entry>
                            </row>
                            <row>
<entry>filePath</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<programlisting linenumbering="unnumbered">123 &#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(FileStream&#32;fileStream&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;FileStream(filePath,&#32;FileMode.Create))
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(GZipStream&#32;zipStream&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;GZipStream(fileStream,&#32;CompressionMode.Compress))
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(StreamWriter&#32;writer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StreamWriter(zipStream))
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writer.Write(data);
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
134 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_data_handler_1a2f657c39727c406846f224d4175f62b2">SaveNoteEventData()</link>, and <link linkend="_class_midi_data_handler_1aa987cf5e013d593eacef15c209a6ddf4">SaveNoteEventData()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Assets/Scripts/<link linkend="__midi_data_handler_8cs">MidiDataHandler.cs</link></section>
</section>
