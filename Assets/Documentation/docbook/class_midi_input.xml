<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_midi_input" xml:lang="en-US">
<title>MidiInput Class Reference</title>
<indexterm><primary>MidiInput</primary></indexterm>
<para>Inheritance diagram for MidiInput:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_midi_input.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_midi_input_1a8d1cc24ea62cc6532a214c7dd056ad1f">LoadScenePreview</link> (string sceneName)</para>

<para>Loads a preview of selected song into the <link linkend="_class_midi_input_1a92402a4627bdb2c6dbf1b7a0ab7c0c86">currentPreview</link> Scene variable, and begins playing the songs preview. </para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">LoadSongFromCurrentSettings</link> (bool isPreview=false)</para>

<para>Loads the selected song for gameplay. </para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1aed66bdb11ffd9ceffc086c4d27e30019">HookMidiDevice</link> ()</para>

<para>Hooks midi devices to be used for input. </para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1aa8f3a281641bffc5cb6f864eaba93f8a">UnHookMidiDevice</link> ()</para>

<para>unhooks midi devices to remove their input. </para>
</listitem>
            <listitem><para><link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> <link linkend="_class_midi_input_1a0e669343713e7dc8eb36f8fdbc5085ef">GetNoteEventWrapperFromSelectedSong</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1a0e4e05b7b1dad73b1c57a2bc40dce15b">StartSongCoroutine</link> ()</para>

<para>called to begin playing the song. </para>
</listitem>
            <listitem><para>IEnumerator <link linkend="_class_midi_input_1ace45aa85d323c88eb98970e6807bb548">StartSong</link> (bool isPreview=false)</para>

<para>Starts playing the loaded song using the current <link linkend="_struct_file_group">FileGroup</link>&apos;s mp3 file field. </para>
</listitem>
            <listitem><para>IEnumerator <link linkend="_class_midi_input_1af90d7c9df4cd5549548550897346f923">StartSong</link> (string mp3Path, bool isPreview=false)</para>

<para>Starts playing the loaded song from a given file path. </para>
</listitem>
            <listitem><para>IEnumerator <link linkend="_class_midi_input_1a26a01dc684fded58c22a9124d779ea91">StartSong</link> (List&lt; <link linkend="_class_note_event_info">NoteEventInfo</link> &gt; loadEvents, bool isPreview=false)</para>

<para>Starts playing a specified list of <link linkend="_class_note_event_info">NoteEventInfo</link> </para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1a622c40a278ed57e97a5c965fb6f73470">StopSong</link> ()</para>

<para>Stops the currently playing song. </para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1aa4804a291f0c49c471a9fb0ecd0a6590">OnNoteSuccess</link> (ref string score, int note, float timing, <link linkend="_class_note_event_info">NoteEventInfo</link> storedNote)</para>

<para>Handles successful note presses. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_midi_input_1a465d54df5cebc0287e58ab5634de9a84">IsNoteCorrect</link> (int noteNumber, float timing, <link linkend="_class_note_event_info">NoteEventInfo</link> storedNote)</para>

<para>Check if note is was played at a correct timing. </para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1a1ef5e834cfe6cdac6b09db8c5d3fccaa">RetryCurrentSong</link> ()</para>

<para>Reloads the currently playing song. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_midi_input_1ab2050608205785b74c868b806a2c9bd0">GetAnyNoteActive</link> ()</para>

<para>Checks for pressed keys in the 8-key keyboard layout. </para>
</listitem>
            <listitem><para>string <link linkend="_class_midi_input_1ab06b15e5c2299d4099decb4a5d88e467">GetTimingScore</link> (float timing)</para>

<para>Gets the timing score based on the timing difference. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>List&lt; <link linkend="_class_note_event_info">NoteEventInfo</link> &gt; <link linkend="_class_midi_input_1a3a26bb867212d9ca4acc6138c7076d1f">storedNoteEvents</link></para>

<para>Currently loaded notes for the selected song. </para>
</listitem>
            <listitem><para>Coroutine <link linkend="_class_midi_input_1a475cd7d525520e4fa04703595c850906">PrepareNotesCoroutine</link></para>

<para>Reference to the <link linkend="_class_game_manager_1a53d0c42e8760b846fd39a6b9b1115566">GameManager.PrepareNotes(float, List&lt;NoteEventInfo&gt;, bool)</link> prepareNotes Coroutine. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_midi_input_1af9765dcdbd7d627ae4de116fddd2005d">isPedalPressed</link></para>

<para>Is the pedal pressed. </para>
</listitem>
            <listitem><para>bool[] <link linkend="_class_midi_input_1a37a3c0da56cdc8bb099ed5c4a2313dc1">enabledKeys</link> = new bool[88]</para>

<para>array of bools corresponding to currently activated keys. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_midi_input_1a9e26bd0e9c890690a633f2fd78731d69">takeInput</link> = true</para>

<para>Should the game take piano input. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_midi_input_1a1ddd47ee58668127ad36428b9433824f">inGame</link> = false</para>

<para>Are we in the game scene. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_midi_input_1a120ba3861326de334e19273612a8dc35">isMidiHooked</link></para>

<para>are midi devices hooked?<?linebreak?> <link linkend="_class_midi_input_1aed66bdb11ffd9ceffc086c4d27e30019">HookMidiDevice</link> and <link linkend="_class_midi_input_1aa8f3a281641bffc5cb6f864eaba93f8a">UnHookMidiDevice</link>. </para>
</listitem>
            <listitem><para>RenderTexture <link linkend="_class_midi_input_1a67f187359e66af0cc732d3674895c59f">renderTexture</link></para>

<para>Render texture used for previewing scenes in Song Selection. </para>
</listitem>
            <listitem><para>Scene <link linkend="_class_midi_input_1a92402a4627bdb2c6dbf1b7a0ab7c0c86">currentPreview</link></para>

<para>Scene used for previewing songs in Song Selection. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_midi_input">MidiInput</link> <link linkend="_class_midi_input_1a7a0aa3fc42bdb7cba08848c7d93d1934">instance</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_midi_input_1a8ae785208729a631af7ff1c02af19d91">Awake</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1abbd1de688b3c04809af8267e5f9dc57f">Update</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1a2e30797511f5bd2f7eaf349978ff2680">PedalStateChanged</link> (MidiChannel channel, int knobNumber, float knobValue)</para>

<para>Handles MIDI sustain pedal state changes. </para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn</link> (MidiChannel channel, int note, float velocity)</para>

<para>Handles MIDI note on events. </para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1a2e24c8cbdc52507a5c148923c9f65d3f">NoteOff</link> (MidiChannel channel, int note)</para>

<para>Handles MIDI note off events. </para>
</listitem>
            <listitem><para>void <link linkend="_class_midi_input_1af8ec16c57a8b0e8b30bb38331dafd265">CheckNotesKeyboard12</link> ()</para>

<para>Checks for pressed keys in the 12-key keyboard layout. </para>
</listitem>
            <listitem><para>float <link linkend="_class_midi_input_1a2df47888c558fed477b80632013512e1">GetTimeDifference</link> (float storedTiming)</para>

<para>Calculates the time difference between the stored timing and the current song time. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>GameObject <link linkend="_class_midi_input_1a86e5b71354e8ab093a1bb860c7419e5e">imagePrefab</link></para>

<para>prefab object with a RawImage component to assign <link linkend="_class_midi_input_1a67f187359e66af0cc732d3674895c59f">renderTexture</link> to. </para>
</listitem>
            <listitem><para>Dictionary&lt; KeyCode, int &gt; <link linkend="_class_midi_input_1a8186284f3ba17fa0e39ffb53249aae6f">keyboard12</link></para>

<para>Dictionary mapping for Computer keyboard input to note input. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_midi_input_1a8ae785208729a631af7ff1c02af19d91"/><section>
    <title>Awake()</title>
<indexterm><primary>Awake</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>Awake</secondary></indexterm>
<para><computeroutput>void MidiInput.Awake ( )<computeroutput>[private]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">82 &#32;&#32;&#32;&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_midi_input_1a7a0aa3fc42bdb7cba08848c7d93d1934">instance</link>&#32;==&#32;<emphasis role="keyword">null</emphasis>)
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a7a0aa3fc42bdb7cba08848c7d93d1934">instance</link>&#32;=&#32;<emphasis role="keyword">this</emphasis>;
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DontDestroyOnLoad(gameObject);
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;Destroy(gameObject);&#32;}
89 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_midi_input_1af8ec16c57a8b0e8b30bb38331dafd265"/><section>
    <title>CheckNotesKeyboard12()</title>
<indexterm><primary>CheckNotesKeyboard12</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>CheckNotesKeyboard12</secondary></indexterm>
<para><computeroutput>void MidiInput.CheckNotesKeyboard12 ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Checks for pressed keys in the 12-key keyboard layout. </para>
</para>
<programlisting linenumbering="unnumbered">481 &#32;&#32;&#32;&#32;{
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;computer&#32;keyboard&#32;key&#32;presses&#32;and&#32;releases</emphasis>
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;keyValuePair&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_midi_input_1a8186284f3ba17fa0e39ffb53249aae6f">keyboard12</link>)
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KeyCode&#32;key&#32;=&#32;keyValuePair.Key;
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;noteNumber&#32;=&#32;keyValuePair.Value;
487 
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Input.GetKeyDown(key))
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simulate&#32;Note&#32;On&#32;event&#32;for&#32;the&#32;pressed&#32;key</emphasis>
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn</link>(MidiChannel.All,&#32;noteNumber,&#32;1.0f);
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
493 
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Input.GetKeyUp(key))
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simulate&#32;Note&#32;Off&#32;event&#32;for&#32;the&#32;released&#32;key</emphasis>
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a2e24c8cbdc52507a5c148923c9f65d3f">NoteOff</link>(MidiChannel.All,&#32;noteNumber);
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
500 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1abbd1de688b3c04809af8267e5f9dc57f">Update()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1ab2050608205785b74c868b806a2c9bd0"/><section>
    <title>GetAnyNoteActive()</title>
<indexterm><primary>GetAnyNoteActive</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>GetAnyNoteActive</secondary></indexterm>
<para><computeroutput>bool MidiInput.GetAnyNoteActive ( )</computeroutput></para><para>

<para>Checks for pressed keys in the 8-key keyboard layout. </para>
</para>

<para>Checks if any note is currently active (pressed).</para>

<para><formalpara><title>Returns</title>

<para>True if any note is active, otherwise false.</para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">511 &#32;&#32;&#32;&#32;{
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<emphasis role="keywordtype">bool</emphasis>&#32;b&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_midi_input_1a37a3c0da56cdc8bb099ed5c4a2313dc1">enabledKeys</link>)
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(b)
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
520 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_midi_input_1a0e669343713e7dc8eb36f8fdbc5085ef"/><section>
    <title>GetNoteEventWrapperFromSelectedSong()</title>
<indexterm><primary>GetNoteEventWrapperFromSelectedSong</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>GetNoteEventWrapperFromSelectedSong</secondary></indexterm>
<para><computeroutput><link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> MidiInput.GetNoteEventWrapperFromSelectedSong ( )</computeroutput></para>
<para><formalpara><title>Returns</title>

<para><link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> loaded from the currently selected song</para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">310 &#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link>&#32;data&#32;=&#32;<link linkend="_class_midi_read_file">MidiReadFile</link>.<link linkend="_class_midi_read_file_1ae92e1f0a1a7c5b7219fe5d8647951219">GetNoteEventsFromFilePath</link>(GameSettings.currentSongPath);
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(data&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{&#32;Debug.Log(<emphasis role="stringliteral">&quot;Error&#32;Reading&#32;data&#32;from&#32;path:&#32;&quot;</emphasis>&#32;+&#32;GameSettings.currentSongPath);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;&#32;}
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a3a26bb867212d9ca4acc6138c7076d1f">storedNoteEvents</link>&#32;=&#32;data.<link linkend="_class_note_event_data_wrapper_1ab50d1b38b07efe975e0abefafea94e4b">NoteEvents</link>;
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
315 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_midi_input_1a2df47888c558fed477b80632013512e1"/><section>
    <title>GetTimeDifference()</title>
<indexterm><primary>GetTimeDifference</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>GetTimeDifference</secondary></indexterm>
<para><computeroutput>float MidiInput.GetTimeDifference (float storedTiming)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Calculates the time difference between the stored timing and the current song time. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>storedTiming</entry><entry>
<para>The stored timing value.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The time difference.</para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">528 &#32;&#32;&#32;&#32;{
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Adjust&#32;this&#32;threshold&#32;based&#32;on&#32;your&#32;timing&#32;accuracy&#32;requirements</emphasis>
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;float&#32;timingThreshold&#32;=&#32;currentSettings.timeInterval;</emphasis>
531 
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;received&#32;timing&#32;is&#32;within&#32;a&#32;certain&#32;threshold&#32;of&#32;the&#32;stored&#32;timing</emphasis>
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//0.125f&#32;leniancy</emphasis>
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Abs(&#32;(<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.songTime&#32;+&#32;PlayerSettings.inputDelay)&#32;&#32;-&#32;0.125f&#32;-&#32;storedTiming);
535 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1ab06b15e5c2299d4099decb4a5d88e467"/><section>
    <title>GetTimingScore()</title>
<indexterm><primary>GetTimingScore</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>GetTimingScore</secondary></indexterm>
<para><computeroutput>string MidiInput.GetTimingScore (float timing)</computeroutput></para><para>

<para>Gets the timing score based on the timing difference. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>timing</entry><entry>
<para>The timing difference.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The timing score (e.g., &quot;Perfect&quot;, &quot;Good&quot;, &quot;Okay&quot;, &quot;Miss&quot;).</para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">542 &#32;&#32;&#32;&#32;{
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(timing&#32;&lt;&#32;0.1f)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Perfect&quot;</emphasis>;&#32;}
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(timing&#32;&lt;&#32;0.175f)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Good&quot;</emphasis>;&#32;}
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(timing&#32;&lt;&#32;0.275f)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Okay&quot;</emphasis>;&#32;}
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Miss&quot;</emphasis>;&#32;}
547 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn()</link>, and <link linkend="_class_midi_input_1aa4804a291f0c49c471a9fb0ecd0a6590">OnNoteSuccess()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1aed66bdb11ffd9ceffc086c4d27e30019"/><section>
    <title>HookMidiDevice()</title>
<indexterm><primary>HookMidiDevice</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>HookMidiDevice</secondary></indexterm>
<para><computeroutput>void MidiInput.HookMidiDevice ( )</computeroutput></para><para>

<para>Hooks midi devices to be used for input. </para>
</para>
<programlisting linenumbering="unnumbered">269 &#32;&#32;&#32;&#32;{
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_midi_input_1a120ba3861326de334e19273612a8dc35">isMidiHooked</link>)&#32;{&#32;Debug.Log(<emphasis role="stringliteral">&quot;Midi&#32;Already&#32;Hooked&quot;</emphasis>);&#32;<emphasis role="keywordflow">return</emphasis>;&#32;}
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MidiMaster.noteOnDelegate&#32;+=&#32;<link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn</link>;
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MidiMaster.noteOffDelegate&#32;+=&#32;<link linkend="_class_midi_input_1a2e24c8cbdc52507a5c148923c9f65d3f">NoteOff</link>;
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MidiMaster.knobDelegate&#32;+=&#32;<link linkend="_class_midi_input_1a2e30797511f5bd2f7eaf349978ff2680">PedalStateChanged</link>;
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a120ba3861326de334e19273612a8dc35">isMidiHooked</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a120ba3861326de334e19273612a8dc35">isMidiHooked</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.Log(<emphasis role="stringliteral">&quot;Error&#32;Hooking&#32;midi&#32;device&quot;</emphasis>);
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
283 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">LoadSongFromCurrentSettings()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a465d54df5cebc0287e58ab5634de9a84"/><section>
    <title>IsNoteCorrect()</title>
<indexterm><primary>IsNoteCorrect</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>IsNoteCorrect</secondary></indexterm>
<para><computeroutput>bool MidiInput.IsNoteCorrect (int noteNumber, float timing, <link linkend="_class_note_event_info">NoteEventInfo</link> storedNote)</computeroutput></para><para>

<para>Check if note is was played at a correct timing. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>noteNumber</entry><entry>
<para>Number of the note played.</para>
</entry>
                            </row>
                            <row>
<entry>timing</entry><entry>
<para>What time the note was hit.</para>
</entry>
                            </row>
                            <row>
<entry>storedNote</entry><entry>
<para>Note that is being compared to.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">445 &#32;&#32;&#32;&#32;{
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GameSettings.usePiano)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;noteNumber&#32;==&#32;storedNote.noteNumber&#32;&amp;&amp;&#32;!storedNote.triggered&#32;&amp;&amp;&#32;timing&#32;&lt;&#32;0.5f;&#32;}
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;noteNumber&#32;%&#32;12&#32;==&#32;storedNote.noteNumber&#32;%&#32;12&#32;&amp;&amp;&#32;!storedNote.triggered&#32;&amp;&amp;&#32;timing&#32;&lt;&#32;0.5f;
448 
449 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a8d1cc24ea62cc6532a214c7dd056ad1f"/><section>
    <title>LoadScenePreview()</title>
<indexterm><primary>LoadScenePreview</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>LoadScenePreview</secondary></indexterm>
<para><computeroutput>void MidiInput.LoadScenePreview (string sceneName)</computeroutput></para><para>

<para>Loads a preview of selected song into the <link linkend="_class_midi_input_1a92402a4627bdb2c6dbf1b7a0ab7c0c86">currentPreview</link> Scene variable, and begins playing the songs preview. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sceneName</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<programlisting linenumbering="unnumbered">128 &#32;&#32;&#32;&#32;{
129 
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_midi_input_1a92402a4627bdb2c6dbf1b7a0ab7c0c86">currentPreview</link>.isLoaded)
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SceneManager.UnloadSceneAsync(<link linkend="_class_midi_input_1a92402a4627bdb2c6dbf1b7a0ab7c0c86">currentPreview</link>);
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AsyncOperation&#32;loadOperation&#32;=&#32;SceneManager.LoadSceneAsync(sceneName,&#32;LoadSceneMode.Additive);
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;loadOperation.completed&#32;+=&#32;(operation)&#32;=&gt;
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a92402a4627bdb2c6dbf1b7a0ab7c0c86">currentPreview</link>&#32;=&#32;SceneManager.GetSceneByName(sceneName);&#32;<emphasis role="comment">//&#32;Assign&#32;the&#32;loaded&#32;scene&#32;to&#32;currentPreview</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OnSceneLoaded(operation);
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
140 
141 
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnSceneLoaded(AsyncOperation&#32;asyncOperation)&#x240D;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
144 
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Scene&#32;previewScene&#32;=&#32;SceneManager.GetSceneByName(sceneName);
146 
147 
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterate&#32;through&#32;the&#32;root&#32;game&#32;objects&#32;of&#32;the&#32;scene</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(GameObject&#32;rootObject&#32;<emphasis role="keywordflow">in</emphasis>&#32;previewScene.GetRootGameObjects())
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rootObject.TryGetComponent(out&#32;TransitionManager&#32;transition))
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transition.GetComponent&lt;Canvas&gt;().enabled&#32;=&#32;<emphasis role="keyword">false</emphasis>;
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rootObject.TryGetComponent(out&#32;Canvas&#32;canvas))
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;canvas.enabled&#32;=&#32;<emphasis role="keyword">false</emphasis>;
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assign&#32;the&#32;object&#32;to&#32;the&#32;&quot;PreviewLayer&quot;</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignToPreviewLayer(rootObject);
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;object&#32;has&#32;an&#32;EventSystem&#32;component&#32;and&#32;destroy&#32;it</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rootObject.TryGetComponent(out&#32;EventSystem&#32;eventSystem))
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Destroy(eventSystem.gameObject);
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;camera&#32;in&#32;the&#32;preview&#32;scene</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Camera&#32;camera&#32;=&#32;rootObject.GetComponentInChildren&lt;Camera&gt;();
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(camera&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
172 
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;camera&#32;to&#32;render&#32;to&#32;the&#32;specified&#32;RenderTexture</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;camera.cullingMask&#32;=&#32;1&#32;&lt;&lt;&#32;LayerMask.NameToLayer(<emphasis role="stringliteral">&quot;PreviewLayer&quot;</emphasis>);
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;camera.targetTexture&#32;=&#32;<link linkend="_class_midi_input_1a67f187359e66af0cc732d3674895c59f">renderTexture</link>;
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
178 
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;new&#32;UI&#32;Image&#32;object</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GameObject&#32;imageObject&#32;=&#32;Instantiate(<link linkend="_class_midi_input_1a86e5b71354e8ab093a1bb860c7419e5e">imagePrefab</link>,&#32;UiHolder.instance.transform);
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RawImage&#32;image&#32;=&#32;imageObject.GetComponentInChildren&lt;RawImage&gt;();&#32;<emphasis role="comment">//&#32;CAN&#32;ONLY&#32;DO&#32;THIS&#32;BECAUSE&#32;IT&#32;IS&#32;RAWIMAGE,&#32;SINCE&#32;I&#32;USE&#32;MANY&#32;NORMAL&#32;IMAGE&#32;TYPES.</emphasis>
182 
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;RawImage&#32;component&#32;exists</emphasis>
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(image&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assign&#32;the&#32;RenderTexture&#32;to&#32;the&#32;RawImage&#32;component&apos;s&#32;texture</emphasis>
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;image.texture&#32;=&#32;<link linkend="_class_midi_input_1a67f187359e66af0cc732d3674895c59f">renderTexture</link>;
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(UiHolder.instance.scenePreview&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{&#32;Destroy(UiHolder.instance.scenePreview);&#32;}
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UiHolder.instance.scenePreview&#32;=&#32;imageObject;
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogError(<emphasis role="stringliteral">&quot;RawImage&#32;component&#32;not&#32;found&#32;on&#32;the&#32;instantiated&#32;image&#32;prefab.&quot;</emphasis>);
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;asyncOperation.completed&#32;-=&#32;OnSceneLoaded;
197 
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Method&#32;to&#32;assign&#32;an&#32;object&#32;and&#32;its&#32;children&#32;to&#32;the&#32;&quot;PreviewLayer&quot;</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AssignToPreviewLayer(GameObject&#32;obj)&#x240D;
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assign&#32;the&#32;object&#32;to&#32;the&#32;&quot;PreviewLayer&quot;</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;obj.layer&#32;=&#32;LayerMask.NameToLayer(<emphasis role="stringliteral">&quot;PreviewLayer&quot;</emphasis>);
205 
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Recursively&#32;assign&#32;children&#32;to&#32;the&#32;&quot;PreviewLayer&quot;</emphasis>
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(Transform&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;obj.transform)
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignToPreviewLayer(child.gameObject);
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
212 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">LoadSongFromCurrentSettings()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037"/><section>
    <title>LoadSongFromCurrentSettings()</title>
<indexterm><primary>LoadSongFromCurrentSettings</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>LoadSongFromCurrentSettings</secondary></indexterm>
<para><computeroutput>void MidiInput.LoadSongFromCurrentSettings (bool isPreview = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Loads the selected song for gameplay. </para>
</para>
<programlisting linenumbering="unnumbered">221 &#32;&#32;&#32;&#32;{
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler">MP3Handler</link>.<link linkend="_class_m_p3_handler_1a0fa70fd58f86cdabb3c80f92f45c6ee2">instance</link>.StopMusic();
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;gameMode;
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_kiboard_debug">KiboardDebug</link>.<link linkend="_class_kiboard_debug_1a87c862afc69067077e5f3cd3e5a8ac98">isMidiConnected</link>&#32;&amp;&amp;&#32;GameSettings.usePiano)&#32;{&#32;gameMode&#32;=&#32;<emphasis role="stringliteral">&quot;GameScene88&quot;</emphasis>;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;gameMode&#32;=&#32;<emphasis role="stringliteral">&quot;GameScene12&quot;</emphasis>;&#32;}
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isPreview)
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a8d1cc24ea62cc6532a214c7dd056ad1f">LoadScenePreview</link>(gameMode);
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link>&#32;data&#32;=&#32;<link linkend="_class_midi_read_file">MidiReadFile</link>.<link linkend="_class_midi_read_file_1ae92e1f0a1a7c5b7219fe5d8647951219">GetNoteEventsFromFilePath</link>(GameSettings.currentSongPath);
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GameSettings.bpm&#32;=&#32;data.<link linkend="_class_note_event_data_wrapper_1a2da8d226562bac9e8f6888deec995a55">BPM</link>;
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a3a26bb867212d9ca4acc6138c7076d1f">storedNoteEvents</link>&#32;=&#32;data.<link linkend="_class_note_event_data_wrapper_1ab50d1b38b07efe975e0abefafea94e4b">NoteEvents</link>;
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a9e26bd0e9c890690a633f2fd78731d69">takeInput</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a1ddd47ee58668127ad36428b9433824f">inGame</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(<link linkend="_class_midi_input_1ace45aa85d323c88eb98970e6807bb548">StartSong</link>(<emphasis role="keyword">true</emphasis>));
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
238 
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TransitionManager.instance.LoadNewScene(gameMode);
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
243 
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(Exception&#32;e)
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.Log(e);
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SceneManager.LoadScene(gameMode);
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
249 
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GameSettings.usePiano)&#32;{&#32;<link linkend="_class_midi_input_1aed66bdb11ffd9ceffc086c4d27e30019">HookMidiDevice</link>();&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<link linkend="_class_midi_input_1aa8f3a281641bffc5cb6f864eaba93f8a">UnHookMidiDevice</link>();&#32;}
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link>&#32;data&#32;=&#32;<link linkend="_class_midi_read_file">MidiReadFile</link>.<link linkend="_class_midi_read_file_1ae92e1f0a1a7c5b7219fe5d8647951219">GetNoteEventsFromFilePath</link>(GameSettings.currentSongPath);
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GameSettings.bpm&#32;=&#32;GameSettings.bpm&#32;==&#32;0&#32;?&#32;data.BPM&#32;:&#32;GameSettings.bpm;
253 
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a3a26bb867212d9ca4acc6138c7076d1f">storedNoteEvents</link>&#32;=&#32;data.<link linkend="_class_note_event_data_wrapper_1ab50d1b38b07efe975e0abefafea94e4b">NoteEvents</link>;
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a9e26bd0e9c890690a633f2fd78731d69">takeInput</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a1ddd47ee58668127ad36428b9433824f">inGame</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_midi_input_1a475cd7d525520e4fa04703595c850906">PrepareNotesCoroutine</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;StopCoroutine(<link linkend="_class_midi_input_1a475cd7d525520e4fa04703595c850906">PrepareNotesCoroutine</link>);
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.StopReadiedNotes();
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(<link linkend="_class_midi_input_1ace45aa85d323c88eb98970e6807bb548">StartSong</link>());
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
261 
262 
263 
264 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1a1ef5e834cfe6cdac6b09db8c5d3fccaa">RetryCurrentSong()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a2e24c8cbdc52507a5c148923c9f65d3f"/><section>
    <title>NoteOff()</title>
<indexterm><primary>NoteOff</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>NoteOff</secondary></indexterm>
<para><computeroutput>void MidiInput.NoteOff (MidiChannel channel, int note)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Handles MIDI note off events. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channel</entry><entry>
<para>The MIDI channel.</para>
</entry>
                            </row>
                            <row>
<entry>note</entry><entry>
<para>The MIDI note number.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<programlisting linenumbering="unnumbered">458 &#32;&#32;&#32;&#32;{
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_midi_input_1a9e26bd0e9c890690a633f2fd78731d69">takeInput</link>&#32;||&#32;<link linkend="_class_midi_input_1af9765dcdbd7d627ae4de116fddd2005d">isPedalPressed</link>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>;&#32;}
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_midi_input_1a1ddd47ee58668127ad36428b9433824f">inGame</link>)
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_spawn_piano">SpawnPiano</link>.<link linkend="_class_spawn_piano_1a81c1e7fb3b0bccb57b3bba39e581f9f3">instance</link>.UpdateKeyColours(note&#32;-&#32;21,&#32;<emphasis role="keyword">false</emphasis>);
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_replay">Replay</link>.<link linkend="_class_replay_1af4136be61df5443c033a781242cf9596">UpdateReplay</link>(note,&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.songTime);
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a37a3c0da56cdc8bb099ed5c4a2313dc1">enabledKeys</link>[note&#32;-&#32;21]&#32;=&#32;<emphasis role="keyword">false</emphasis>;
466 
467 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1af8ec16c57a8b0e8b30bb38331dafd265">CheckNotesKeyboard12()</link>, <link linkend="_class_midi_input_1aed66bdb11ffd9ceffc086c4d27e30019">HookMidiDevice()</link>, and <link linkend="_class_midi_input_1aa8f3a281641bffc5cb6f864eaba93f8a">UnHookMidiDevice()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a"/><section>
    <title>NoteOn()</title>
<indexterm><primary>NoteOn</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>NoteOn</secondary></indexterm>
<para><computeroutput>void MidiInput.NoteOn (MidiChannel channel, int note, float velocity)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Handles MIDI note on events. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channel</entry><entry>
<para>The MIDI channel.</para>
</entry>
                            </row>
                            <row>
<entry>note</entry><entry>
<para>The MIDI note number.</para>
</entry>
                            </row>
                            <row>
<entry>velocity</entry><entry>
<para>The note velocity.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<programlisting linenumbering="unnumbered">387 &#32;&#32;&#32;&#32;{
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_midi_input_1a9e26bd0e9c890690a633f2fd78731d69">takeInput</link>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>;&#32;}
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;received&#32;note&#32;and&#32;timing&#32;match&#32;any&#32;stored&#32;events</emphasis>
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_midi_input_1a1ddd47ee58668127ad36428b9433824f">inGame</link>)
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;score&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;timing&#32;=&#32;Mathf.Infinity;
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_note_event_info">NoteEventInfo</link>&#32;storedNote&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_midi_input_1a3a26bb867212d9ca4acc6138c7076d1f">storedNoteEvents</link>)
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_midi_input_1a3a26bb867212d9ca4acc6138c7076d1f">storedNoteEvents</link>&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>;&#32;}
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timing&#32;=&#32;<link linkend="_class_midi_input_1a2df47888c558fed477b80632013512e1">GetTimeDifference</link>(storedNote.<link linkend="_class_note_event_info_1aaeaec089312cf881c719b2b56680fbff">startTime</link>);
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_midi_input_1a465d54df5cebc0287e58ab5634de9a84">IsNoteCorrect</link>(note,&#32;timing,&#32;storedNote))
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1aa4804a291f0c49c471a9fb0ecd0a6590">OnNoteSuccess</link>(ref&#32;score,&#32;note,&#32;timing,&#32;storedNote);
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;Exit&#32;the&#32;loop&#32;after&#32;the&#32;first&#32;match</emphasis>
402 
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
404 
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
406 
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;score&#32;??=&#32;<link linkend="_class_midi_input_1ab06b15e5c2299d4099decb4a5d88e467">GetTimingScore</link>(timing);
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.combo.ChangeMultiplier(score);
409 
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_spawn_piano">SpawnPiano</link>.<link linkend="_class_spawn_piano_1a81c1e7fb3b0bccb57b3bba39e581f9f3">instance</link>.UpdateKeyColours(note&#32;-&#32;21,&#32;<emphasis role="keyword">true</emphasis>,&#32;score);
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.songTime&#32;&gt;=&#32;0)
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.UpdatePlayerScore(score);
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_replay">Replay</link>.<link linkend="_class_replay_1af4136be61df5443c033a781242cf9596">UpdateReplay</link>(note,&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.songTime);
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a37a3c0da56cdc8bb099ed5c4a2313dc1">enabledKeys</link>[note&#32;-&#32;21]&#32;=&#32;<emphasis role="keyword">true</emphasis>;
418 
419 
420 
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
422 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1af8ec16c57a8b0e8b30bb38331dafd265">CheckNotesKeyboard12()</link>, <link linkend="_class_midi_input_1aed66bdb11ffd9ceffc086c4d27e30019">HookMidiDevice()</link>, and <link linkend="_class_midi_input_1aa8f3a281641bffc5cb6f864eaba93f8a">UnHookMidiDevice()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1aa4804a291f0c49c471a9fb0ecd0a6590"/><section>
    <title>OnNoteSuccess()</title>
<indexterm><primary>OnNoteSuccess</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>OnNoteSuccess</secondary></indexterm>
<para><computeroutput>void MidiInput.OnNoteSuccess (ref string score, int note, float timing, <link linkend="_class_note_event_info">NoteEventInfo</link> storedNote)</computeroutput></para><para>

<para>Handles successful note presses. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>score</entry><entry></entry>
                            </row>
                            <row>
<entry>note</entry><entry></entry>
                            </row>
                            <row>
<entry>timing</entry><entry></entry>
                            </row>
                            <row>
<entry>storedNote</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<programlisting linenumbering="unnumbered">432 &#32;&#32;&#32;&#32;{
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;score&#32;=&#32;<link linkend="_class_midi_input_1ab06b15e5c2299d4099decb4a5d88e467">GetTimingScore</link>(timing);
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_spawn_piano">SpawnPiano</link>.<link linkend="_class_spawn_piano_1a81c1e7fb3b0bccb57b3bba39e581f9f3">instance</link>.SpawnKeyParticle(note&#32;-&#32;21,&#32;score);
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;storedNote.triggered&#32;=&#32;<emphasis role="keyword">true</emphasis>;
436 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a2e30797511f5bd2f7eaf349978ff2680"/><section>
    <title>PedalStateChanged()</title>
<indexterm><primary>PedalStateChanged</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>PedalStateChanged</secondary></indexterm>
<para><computeroutput>void MidiInput.PedalStateChanged (MidiChannel channel, int knobNumber, float knobValue)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Handles MIDI sustain pedal state changes. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channel</entry><entry>
<para>The MIDI channel.</para>
</entry>
                            </row>
                            <row>
<entry>knobNumber</entry><entry>
<para>The knob number.</para>
</entry>
                            </row>
                            <row>
<entry>knobValue</entry><entry>
<para>The knob value.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<programlisting linenumbering="unnumbered">109 &#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(knobNumber&#32;==&#32;64&#32;&amp;&amp;&#32;knobValue&#32;&gt;&#32;0.5f)
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1af9765dcdbd7d627ae4de116fddd2005d">isPedalPressed</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
113 
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1af9765dcdbd7d627ae4de116fddd2005d">isPedalPressed</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{&#32;<link linkend="_class_spawn_piano">SpawnPiano</link>.<link linkend="_class_spawn_piano_1a81c1e7fb3b0bccb57b3bba39e581f9f3">instance</link>.ClearAllKeyColours();&#32;}
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;{&#32;}
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
121 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1aed66bdb11ffd9ceffc086c4d27e30019">HookMidiDevice()</link>, and <link linkend="_class_midi_input_1aa8f3a281641bffc5cb6f864eaba93f8a">UnHookMidiDevice()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a1ef5e834cfe6cdac6b09db8c5d3fccaa"/><section>
    <title>RetryCurrentSong()</title>
<indexterm><primary>RetryCurrentSong</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>RetryCurrentSong</secondary></indexterm>
<para><computeroutput>void MidiInput.RetryCurrentSong ( )</computeroutput></para><para>

<para>Reloads the currently playing song. </para>
</para>
<programlisting linenumbering="unnumbered">472 &#32;&#32;&#32;&#32;{
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1aa8f3a281641bffc5cb6f864eaba93f8a">UnHookMidiDevice</link>();
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">LoadSongFromCurrentSettings</link>(<emphasis role="keyword">false</emphasis>);
475 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_midi_input_1ace45aa85d323c88eb98970e6807bb548"/><section>
    <title>StartSong()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>StartSong</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>StartSong</secondary></indexterm>
<para><computeroutput>IEnumerator MidiInput.StartSong (bool isPreview = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Starts playing the loaded song using the current <link linkend="_struct_file_group">FileGroup</link>&apos;s mp3 file field. </para>
</para>

<para><formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">328 &#32;&#32;&#32;&#32;{
329 
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.currentSongScore.ClearScore();
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.combo.ClearCombo();
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_midi_input_1a475cd7d525520e4fa04703595c850906">PrepareNotesCoroutine</link>&#32;=&#32;StartCoroutine(<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.PrepareNotes(GameSettings.bpm,&#32;<link linkend="_class_midi_input_1a3a26bb867212d9ca4acc6138c7076d1f">storedNoteEvents</link>,&#32;isPreview));
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(<link linkend="_class_m_p3_handler">MP3Handler</link>.<link linkend="_class_m_p3_handler_1a0fa70fd58f86cdabb3c80f92f45c6ee2">instance</link>.PlaySong(SongSelection.GetUnderscoreSubstring(GameSettings.currentFileGroup.Mp3File)));
334 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">LoadSongFromCurrentSettings()</link>, and <link linkend="_class_midi_input_1a0e4e05b7b1dad73b1c57a2bc40dce15b">StartSongCoroutine()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a26a01dc684fded58c22a9124d779ea91"/><section>
    <title>StartSong()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>StartSong</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>StartSong</secondary></indexterm>
<para><computeroutput>IEnumerator MidiInput.StartSong (List&lt; <link linkend="_class_note_event_info">NoteEventInfo</link> &gt; loadEvents, bool isPreview = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Starts playing a specified list of <link linkend="_class_note_event_info">NoteEventInfo</link> </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>loadEvents</entry><entry>
<para>The list of note events to play.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">353 &#32;&#32;&#32;&#32;{
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.currentSongScore.ClearScore();
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;bpm&#32;=&#32;GameSettings.bpm;
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;loadEvents.ForEach(noteEvent&#32;=&gt;&#32;noteEvent.noteNumber&#32;+=&#32;20);&#32;<emphasis role="comment">//&#32;i&#32;-&#32;for&#32;the&#32;fucking&#32;life&#32;of&#32;me-&#32;cannot&#32;figure&#32;out&#32;why&#32;directly&#32;processing&#32;the&#32;midi&#32;files&#32;makes&#32;the&#32;note&#32;numbers</emphasis>
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;20&#32;higher,&#32;but&#32;i&#32;have&#32;to&#32;do&#32;this&#32;to&#32;match&#32;that&#32;with&#32;the&#32;song&#32;editor.</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_midi_input_1a475cd7d525520e4fa04703595c850906">PrepareNotesCoroutine</link>&#32;=&#32;StartCoroutine(<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.PrepareNotes(GameSettings.bpm,&#32;<link linkend="_class_midi_input_1a3a26bb867212d9ca4acc6138c7076d1f">storedNoteEvents</link>,&#32;isPreview));
359 
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(<link linkend="_class_m_p3_handler">MP3Handler</link>.<link linkend="_class_m_p3_handler_1a0fa70fd58f86cdabb3c80f92f45c6ee2">instance</link>.PlaySong(GameSettings.currentSongPath));
361 
362 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_midi_input_1af90d7c9df4cd5549548550897346f923"/><section>
    <title>StartSong()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>StartSong</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>StartSong</secondary></indexterm>
<para><computeroutput>IEnumerator MidiInput.StartSong (string mp3Path, bool isPreview = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Starts playing the loaded song from a given file path. </para>
</para>

<para><formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">340 &#32;&#32;&#32;&#32;{
341 
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.currentSongScore.ClearScore();
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.combo.ClearCombo();
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_midi_input_1a475cd7d525520e4fa04703595c850906">PrepareNotesCoroutine</link>&#32;=&#32;StartCoroutine(<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.PrepareNotes(GameSettings.bpm,&#32;<link linkend="_class_midi_input_1a3a26bb867212d9ca4acc6138c7076d1f">storedNoteEvents</link>,&#32;isPreview));
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(<link linkend="_class_m_p3_handler">MP3Handler</link>.<link linkend="_class_m_p3_handler_1a0fa70fd58f86cdabb3c80f92f45c6ee2">instance</link>.PlaySong(mp3Path));
346 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_midi_input_1a0e4e05b7b1dad73b1c57a2bc40dce15b"/><section>
    <title>StartSongCoroutine()</title>
<indexterm><primary>StartSongCoroutine</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>StartSongCoroutine</secondary></indexterm>
<para><computeroutput>void MidiInput.StartSongCoroutine ( )</computeroutput></para><para>

<para>called to begin playing the song. </para>
</para>
<programlisting linenumbering="unnumbered">320 &#32;&#32;&#32;&#32;{
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(<link linkend="_class_midi_input_1ace45aa85d323c88eb98970e6807bb548">StartSong</link>());
322 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_midi_input_1a622c40a278ed57e97a5c965fb6f73470"/><section>
    <title>StopSong()</title>
<indexterm><primary>StopSong</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>StopSong</secondary></indexterm>
<para><computeroutput>void MidiInput.StopSong ( )</computeroutput></para><para>

<para>Stops the currently playing song. </para>
</para>
<programlisting linenumbering="unnumbered">368 &#32;&#32;&#32;&#32;{
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.isCurSongPreview)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>;&#32;}
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.StopSong();
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StopCoroutine(<link linkend="_class_midi_input_1a475cd7d525520e4fa04703595c850906">PrepareNotesCoroutine</link>);
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler">MP3Handler</link>.<link linkend="_class_m_p3_handler_1a0fa70fd58f86cdabb3c80f92f45c6ee2">instance</link>.StopMusic();
373 
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GameSettings.ResetSettings(<emphasis role="keyword">false</emphasis>);
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.ReturnToSongSelection();
376 
377 
378 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1abbd1de688b3c04809af8267e5f9dc57f">Update()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1aa8f3a281641bffc5cb6f864eaba93f8a"/><section>
    <title>UnHookMidiDevice()</title>
<indexterm><primary>UnHookMidiDevice</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>UnHookMidiDevice</secondary></indexterm>
<para><computeroutput>void MidiInput.UnHookMidiDevice ( )</computeroutput></para><para>

<para>unhooks midi devices to remove their input. </para>
</para>
<programlisting linenumbering="unnumbered">288 &#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MidiMaster.noteOnDelegate&#32;-=&#32;<link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn</link>;
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MidiMaster.noteOffDelegate&#32;-=&#32;<link linkend="_class_midi_input_1a2e24c8cbdc52507a5c148923c9f65d3f">NoteOff</link>;
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MidiMaster.knobDelegate&#32;-=&#32;<link linkend="_class_midi_input_1a2e30797511f5bd2f7eaf349978ff2680">PedalStateChanged</link>;
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a120ba3861326de334e19273612a8dc35">isMidiHooked</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a120ba3861326de334e19273612a8dc35">isMidiHooked</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.Log(<emphasis role="stringliteral">&quot;Error&#32;Unhooking&#32;midi&#32;device&quot;</emphasis>);
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
302 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">LoadSongFromCurrentSettings()</link>, and <link linkend="_class_midi_input_1a1ef5e834cfe6cdac6b09db8c5d3fccaa">RetryCurrentSong()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1abbd1de688b3c04809af8267e5f9dc57f"/><section>
    <title>Update()</title>
<indexterm><primary>Update</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>Update</secondary></indexterm>
<para><computeroutput>void MidiInput.Update ( )<computeroutput>[private]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">92 &#32;&#32;&#32;&#32;{
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Input.GetKeyDown(KeyCode.Escape))
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1a622c40a278ed57e97a5c965fb6f73470">StopSong</link>();
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_input_1af8ec16c57a8b0e8b30bb38331dafd265">CheckNotesKeyboard12</link>();
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//CheckNotesKeyboard8();</emphasis>
99 
100 &#32;&#32;&#32;&#32;}
</programlisting></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_midi_input_1a92402a4627bdb2c6dbf1b7a0ab7c0c86"/><section>
    <title>currentPreview</title>
<indexterm><primary>currentPreview</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>currentPreview</secondary></indexterm>
<para><computeroutput>Scene MidiInput.currentPreview</computeroutput></para><para>

<para>Scene used for previewing songs in Song Selection. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_input_1a8d1cc24ea62cc6532a214c7dd056ad1f">LoadScenePreview()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a37a3c0da56cdc8bb099ed5c4a2313dc1"/><section>
    <title>enabledKeys</title>
<indexterm><primary>enabledKeys</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>enabledKeys</secondary></indexterm>
<para><computeroutput>bool [] MidiInput.enabledKeys = new bool[88]</computeroutput></para><para>

<para>array of bools corresponding to currently activated keys. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_input_1ab2050608205785b74c868b806a2c9bd0">GetAnyNoteActive()</link>, <link linkend="_class_midi_input_1a2e24c8cbdc52507a5c148923c9f65d3f">NoteOff()</link>, and <link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a86e5b71354e8ab093a1bb860c7419e5e"/><section>
    <title>imagePrefab</title>
<indexterm><primary>imagePrefab</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>imagePrefab</secondary></indexterm>
<para><computeroutput>GameObject MidiInput.imagePrefab<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>prefab object with a RawImage component to assign <link linkend="_class_midi_input_1a67f187359e66af0cc732d3674895c59f">renderTexture</link> to. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_input_1a8d1cc24ea62cc6532a214c7dd056ad1f">LoadScenePreview()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a1ddd47ee58668127ad36428b9433824f"/><section>
    <title>inGame</title>
<indexterm><primary>inGame</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>inGame</secondary></indexterm>
<para><computeroutput>bool MidiInput.inGame = false</computeroutput></para><para>

<para>Are we in the game scene. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">LoadSongFromCurrentSettings()</link>, <link linkend="_class_midi_input_1a2e24c8cbdc52507a5c148923c9f65d3f">NoteOff()</link>, and <link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a7a0aa3fc42bdb7cba08848c7d93d1934"/><section>
    <title>instance</title>
<indexterm><primary>instance</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>instance</secondary></indexterm>
<para><computeroutput><link linkend="_class_midi_input">MidiInput</link> MidiInput.instance<computeroutput>[static]</computeroutput></computeroutput></para><para>
Referenced by <link linkend="_class_game_manager_1a2b01e6fd64224a2caad8ff75dd9ca4d2">GameManager.AssignToPreviewLayer()</link>, <link linkend="_class_midi_input_1a8ae785208729a631af7ff1c02af19d91">Awake()</link>, <link linkend="_class_main_menu_load_1a326703887ad372e974b12a454c60332d">MainMenuLoad.LoadToSongSelect()</link>, <link linkend="_class_game_manager_1a53d0c42e8760b846fd39a6b9b1115566">GameManager.PrepareNotes()</link>, and <link linkend="_class_game_manager_1a088bb12a26add1a57b027b46aced6863">GameManager.ReturnToSongSelection()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a120ba3861326de334e19273612a8dc35"/><section>
    <title>isMidiHooked</title>
<indexterm><primary>isMidiHooked</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>isMidiHooked</secondary></indexterm>
<para><computeroutput>bool MidiInput.isMidiHooked</computeroutput></para><para>

<para>are midi devices hooked?<?linebreak?> <link linkend="_class_midi_input_1aed66bdb11ffd9ceffc086c4d27e30019">HookMidiDevice</link> and <link linkend="_class_midi_input_1aa8f3a281641bffc5cb6f864eaba93f8a">UnHookMidiDevice</link>. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_input_1aed66bdb11ffd9ceffc086c4d27e30019">HookMidiDevice()</link>, and <link linkend="_class_midi_input_1aa8f3a281641bffc5cb6f864eaba93f8a">UnHookMidiDevice()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1af9765dcdbd7d627ae4de116fddd2005d"/><section>
    <title>isPedalPressed</title>
<indexterm><primary>isPedalPressed</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>isPedalPressed</secondary></indexterm>
<para><computeroutput>bool MidiInput.isPedalPressed</computeroutput></para><para>

<para>Is the pedal pressed. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_input_1a2e24c8cbdc52507a5c148923c9f65d3f">NoteOff()</link>, and <link linkend="_class_midi_input_1a2e30797511f5bd2f7eaf349978ff2680">PedalStateChanged()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a8186284f3ba17fa0e39ffb53249aae6f"/><section>
    <title>keyboard12</title>
<indexterm><primary>keyboard12</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>keyboard12</secondary></indexterm>
<para><computeroutput>Dictionary&lt;KeyCode, int&gt; MidiInput.keyboard12<computeroutput>[private]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;KeyCode,&#32;int&gt;
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.A,&#32;48&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.W,&#32;49&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.S,&#32;50&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.E,&#32;51&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.D,&#32;52&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.F,&#32;53&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.T,&#32;54&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.G,&#32;55&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.Y,&#32;56&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.H,&#32;57&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.U,&#32;58&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.J,&#32;59&#32;},
&#32;&#32;&#32;&#32;}
</programlisting><para>

<para>Dictionary mapping for Computer keyboard input to note input. </para>
</para>
<programlisting linenumbering="unnumbered">60 &#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.A,&#32;48&#32;},
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.W,&#32;49&#32;},
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.S,&#32;50&#32;},
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.E,&#32;51&#32;},
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.D,&#32;52&#32;},
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.F,&#32;53&#32;},
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.T,&#32;54&#32;},
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.G,&#32;55&#32;},
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.Y,&#32;56&#32;},
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.H,&#32;57&#32;},
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.U,&#32;58&#32;},
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;KeyCode.J,&#32;59&#32;},
73 &#32;&#32;&#32;&#32;};
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1af8ec16c57a8b0e8b30bb38331dafd265">CheckNotesKeyboard12()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a475cd7d525520e4fa04703595c850906"/><section>
    <title>PrepareNotesCoroutine</title>
<indexterm><primary>PrepareNotesCoroutine</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>PrepareNotesCoroutine</secondary></indexterm>
<para><computeroutput>Coroutine MidiInput.PrepareNotesCoroutine</computeroutput></para><para>

<para>Reference to the <link linkend="_class_game_manager_1a53d0c42e8760b846fd39a6b9b1115566">GameManager.PrepareNotes(float, List&lt;NoteEventInfo&gt;, bool)</link> prepareNotes Coroutine. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">LoadSongFromCurrentSettings()</link>, <link linkend="_class_midi_input_1ace45aa85d323c88eb98970e6807bb548">StartSong()</link>, <link linkend="_class_midi_input_1a26a01dc684fded58c22a9124d779ea91">StartSong()</link>, <link linkend="_class_midi_input_1af90d7c9df4cd5549548550897346f923">StartSong()</link>, and <link linkend="_class_midi_input_1a622c40a278ed57e97a5c965fb6f73470">StopSong()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a67f187359e66af0cc732d3674895c59f"/><section>
    <title>renderTexture</title>
<indexterm><primary>renderTexture</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>renderTexture</secondary></indexterm>
<para><computeroutput>RenderTexture MidiInput.renderTexture</computeroutput></para><para>

<para>Render texture used for previewing scenes in Song Selection. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_input_1a8d1cc24ea62cc6532a214c7dd056ad1f">LoadScenePreview()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a3a26bb867212d9ca4acc6138c7076d1f"/><section>
    <title>storedNoteEvents</title>
<indexterm><primary>storedNoteEvents</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>storedNoteEvents</secondary></indexterm>
<para><computeroutput>List&lt;<link linkend="_class_note_event_info">NoteEventInfo</link>&gt; MidiInput.storedNoteEvents</computeroutput></para><para>

<para>Currently loaded notes for the selected song. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_input_1a0e669343713e7dc8eb36f8fdbc5085ef">GetNoteEventWrapperFromSelectedSong()</link>, <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">LoadSongFromCurrentSettings()</link>, <link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn()</link>, <link linkend="_class_midi_input_1ace45aa85d323c88eb98970e6807bb548">StartSong()</link>, <link linkend="_class_midi_input_1a26a01dc684fded58c22a9124d779ea91">StartSong()</link>, and <link linkend="_class_midi_input_1af90d7c9df4cd5549548550897346f923">StartSong()</link>.</para>
</section>
<anchor xml:id="_class_midi_input_1a9e26bd0e9c890690a633f2fd78731d69"/><section>
    <title>takeInput</title>
<indexterm><primary>takeInput</primary><secondary>MidiInput</secondary></indexterm>
<indexterm><primary>MidiInput</primary><secondary>takeInput</secondary></indexterm>
<para><computeroutput>bool MidiInput.takeInput = true</computeroutput></para><para>

<para>Should the game take piano input. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">LoadSongFromCurrentSettings()</link>, <link linkend="_class_midi_input_1a2e24c8cbdc52507a5c148923c9f65d3f">NoteOff()</link>, and <link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">NoteOn()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Assets/Scripts/<link linkend="__midi_input_8cs">MidiInput.cs</link></section>
</section>
