<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_note_event_info" xml:lang="en-US">
<title>NoteEventInfo Class Reference</title>
<indexterm><primary>NoteEventInfo</primary></indexterm>
<para>

<para>Class containing all info needed to play a note. </para>
 
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_note_event_info_1a3986c534b859bd61b047941cd3951f49">NoteEventInfo</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_note_event_info_1a3b001565b1e72963a9630adbe706842a">NoteEventInfo</link> (int <link linkend="_class_note_event_info_1a9435e829c3bd157528c83c87c7a481df">noteNumber</link>, float <link linkend="_class_note_event_info_1aaeaec089312cf881c719b2b56680fbff">startTime</link>, float <link linkend="_class_note_event_info_1a76b4dce9953ce2bce508fa5a35ef7f7c">endTime</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_note_event_info_1aa8a865f4cafede7bf9253a805304eb76">NoteEventInfo</link> (float bpm)</para>

<para>Override to set bpm this way so that i don&apos;t need to make a seperate class and implement it, OR store a bpm float with every note. just be sure to check start time when processing them. </para>
</listitem>
            <listitem><para>float <link linkend="_class_note_event_info_1abfb6def635487efee09669acfb69e7e2">GetDuration</link> ()</para>

<para>Calculate duration of note. </para>
</listitem>
            <listitem><para>void <link linkend="_class_note_event_info_1a09db3f7bf93597788cd4e3e69c302651">SetStartEndTime</link> (float start, float end)</para>

<para>sets start and end time. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_class_note_event_info_1a9435e829c3bd157528c83c87c7a481df">noteNumber</link></para>

<para>Number of the note ranging from 0-87 coinciding with the notes on a piano. </para>
</listitem>
            <listitem><para>float <link linkend="_class_note_event_info_1aaeaec089312cf881c719b2b56680fbff">startTime</link></para>

<para>starting time of the note. </para>
</listitem>
            <listitem><para>float <link linkend="_class_note_event_info_1a76b4dce9953ce2bce508fa5a35ef7f7c">endTime</link></para>

<para>release time of the note. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_note_event_info_1a1e1aaa2a68e745c6854e4a4daa7da1ff">triggered</link></para>

<para>Has this note been triggered already? </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Class containing all info needed to play a note. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_note_event_info_1a3986c534b859bd61b047941cd3951f49"/><section>
    <title>NoteEventInfo()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>NoteEventInfo</primary><secondary>NoteEventInfo</secondary></indexterm>
<indexterm><primary>NoteEventInfo</primary><secondary>NoteEventInfo</secondary></indexterm>
<para><computeroutput>NoteEventInfo.NoteEventInfo ( )</computeroutput></para><programlisting linenumbering="unnumbered">33 &#32;&#32;&#32;&#32;{
34 
35 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_note_event_info_1a3b001565b1e72963a9630adbe706842a"/><section>
    <title>NoteEventInfo()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>NoteEventInfo</primary><secondary>NoteEventInfo</secondary></indexterm>
<indexterm><primary>NoteEventInfo</primary><secondary>NoteEventInfo</secondary></indexterm>
<para><computeroutput>NoteEventInfo.NoteEventInfo (int noteNumber, float startTime, float endTime)</computeroutput></para><programlisting linenumbering="unnumbered">38 &#32;&#32;&#32;&#32;{
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.noteNumber&#32;=&#32;<link linkend="_class_note_event_info_1a9435e829c3bd157528c83c87c7a481df">noteNumber</link>;
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.startTime&#32;=&#32;<link linkend="_class_note_event_info_1aaeaec089312cf881c719b2b56680fbff">startTime</link>;
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.endTime&#32;=&#32;<link linkend="_class_note_event_info_1a76b4dce9953ce2bce508fa5a35ef7f7c">endTime</link>;
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.triggered&#32;=&#32;<emphasis role="keyword">false</emphasis>;
43 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_note_event_info_1aa8a865f4cafede7bf9253a805304eb76"/><section>
    <title>NoteEventInfo()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>NoteEventInfo</primary><secondary>NoteEventInfo</secondary></indexterm>
<indexterm><primary>NoteEventInfo</primary><secondary>NoteEventInfo</secondary></indexterm>
<para><computeroutput>NoteEventInfo.NoteEventInfo (float bpm)</computeroutput></para><para>

<para>Override to set bpm this way so that i don&apos;t need to make a seperate class and implement it, OR store a bpm float with every note. just be sure to check start time when processing them. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Bpm</entry><entry>
<para>new bpm to set to when note is processed.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<programlisting linenumbering="unnumbered">51 &#32;&#32;&#32;&#32;{
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.noteNumber&#32;=&#32;<emphasis role="keywordtype">int</emphasis>.MinValue;
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.startTime&#32;=&#32;<emphasis role="keywordtype">float</emphasis>.NegativeInfinity;
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.endTime&#32;=&#32;bpm;
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.triggered&#32;=&#32;<emphasis role="keyword">false</emphasis>;
56 &#32;&#32;&#32;&#32;}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_note_event_info_1abfb6def635487efee09669acfb69e7e2"/><section>
    <title>GetDuration()</title>
<indexterm><primary>GetDuration</primary><secondary>NoteEventInfo</secondary></indexterm>
<indexterm><primary>NoteEventInfo</primary><secondary>GetDuration</secondary></indexterm>
<para><computeroutput>float NoteEventInfo.GetDuration ( )</computeroutput></para><para>

<para>Calculate duration of note. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Float containing note duration.</para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">63 &#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_note_event_info_1a76b4dce9953ce2bce508fa5a35ef7f7c">endTime</link>&#32;-&#32;<link linkend="_class_note_event_info_1aaeaec089312cf881c719b2b56680fbff">startTime</link>;
65 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_song_note_editor_1a574b4799d519a82339dbdc639e760eca">SongNoteEditor.UpdateStartEndTimes()</link>.</para>
</section>
<anchor xml:id="_class_note_event_info_1a09db3f7bf93597788cd4e3e69c302651"/><section>
    <title>SetStartEndTime()</title>
<indexterm><primary>SetStartEndTime</primary><secondary>NoteEventInfo</secondary></indexterm>
<indexterm><primary>NoteEventInfo</primary><secondary>SetStartEndTime</secondary></indexterm>
<para><computeroutput>void NoteEventInfo.SetStartEndTime (float start, float end)</computeroutput></para><para>

<para>sets start and end time. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>start</entry><entry>
<para>new start time.</para>
</entry>
                            </row>
                            <row>
<entry>end</entry><entry>
<para>new end time.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<programlisting linenumbering="unnumbered">72 &#32;&#32;&#32;&#32;{
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_note_event_info_1aaeaec089312cf881c719b2b56680fbff">startTime</link>&#32;=&#32;start;
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_note_event_info_1a76b4dce9953ce2bce508fa5a35ef7f7c">endTime</link>&#32;=&#32;end;
75 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_song_note_editor_1a574b4799d519a82339dbdc639e760eca">SongNoteEditor.UpdateStartEndTimes()</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_note_event_info_1a76b4dce9953ce2bce508fa5a35ef7f7c"/><section>
    <title>endTime</title>
<indexterm><primary>endTime</primary><secondary>NoteEventInfo</secondary></indexterm>
<indexterm><primary>NoteEventInfo</primary><secondary>endTime</secondary></indexterm>
<para><computeroutput>float NoteEventInfo.endTime</computeroutput></para><para>

<para>release time of the note. </para>
</para>
<para>
Referenced by <link linkend="_class_note_event_info_1abfb6def635487efee09669acfb69e7e2">GetDuration()</link>, <link linkend="_class_note_event_info_1a3b001565b1e72963a9630adbe706842a">NoteEventInfo()</link>, <link linkend="_class_game_manager_1a53d0c42e8760b846fd39a6b9b1115566">GameManager.PrepareNotes()</link>, <link linkend="_class_song_note_editor_1a5957d0008b8759d50607b11cf2d51d5f">SongNoteEditor.RescaleNotesFromBPM()</link>, <link linkend="_class_song_note_editor_1ab97d39b001c5ceebc116d7d02dccdf87">SongNoteEditor.ScaleNote()</link>, and <link linkend="_class_note_event_info_1a09db3f7bf93597788cd4e3e69c302651">SetStartEndTime()</link>.</para>
</section>
<anchor xml:id="_class_note_event_info_1a9435e829c3bd157528c83c87c7a481df"/><section>
    <title>noteNumber</title>
<indexterm><primary>noteNumber</primary><secondary>NoteEventInfo</secondary></indexterm>
<indexterm><primary>NoteEventInfo</primary><secondary>noteNumber</secondary></indexterm>
<para><computeroutput>int NoteEventInfo.noteNumber</computeroutput></para><para>

<para>Number of the note ranging from 0-87 coinciding with the notes on a piano. </para>
</para>
<para>
Referenced by <link linkend="_class_game_manager_1a750548d06231926291304fc3b5ebb0d5">GameManager.CheckSpawnNote()</link>, <link linkend="_class_song_note_editor_1a05ea5d53cf9e8d601a734be1ef97df55">SongNoteEditor.ConvertNoteEventToNotePosition()</link>, <link linkend="_class_note_event_info_1a3b001565b1e72963a9630adbe706842a">NoteEventInfo()</link>, <link linkend="_class_game_manager_1a53d0c42e8760b846fd39a6b9b1115566">GameManager.PrepareNotes()</link>, and <link linkend="_class_editor_note_1a7f841047bd2c4288a13f35d3f9620e2e">EditorNote.SetNotePosition()</link>.</para>
</section>
<anchor xml:id="_class_note_event_info_1aaeaec089312cf881c719b2b56680fbff"/><section>
    <title>startTime</title>
<indexterm><primary>startTime</primary><secondary>NoteEventInfo</secondary></indexterm>
<indexterm><primary>NoteEventInfo</primary><secondary>startTime</secondary></indexterm>
<para><computeroutput>float NoteEventInfo.startTime</computeroutput></para><para>

<para>starting time of the note. </para>
</para>
<para>
Referenced by <link linkend="_class_game_manager_1a750548d06231926291304fc3b5ebb0d5">GameManager.CheckSpawnNote()</link>, <link linkend="_class_song_note_editor_1a05ea5d53cf9e8d601a734be1ef97df55">SongNoteEditor.ConvertNoteEventToNotePosition()</link>, <link linkend="_class_note_event_info_1abfb6def635487efee09669acfb69e7e2">GetDuration()</link>, <link linkend="_class_note_event_info_1a3b001565b1e72963a9630adbe706842a">NoteEventInfo()</link>, <link linkend="_class_midi_input_1a358348cc54a49193003a2788f81b7b4a">MidiInput.NoteOn()</link>, <link linkend="_class_game_manager_1a53d0c42e8760b846fd39a6b9b1115566">GameManager.PrepareNotes()</link>, <link linkend="_class_song_note_editor_1a5957d0008b8759d50607b11cf2d51d5f">SongNoteEditor.RescaleNotesFromBPM()</link>, <link linkend="_class_song_note_editor_1ab97d39b001c5ceebc116d7d02dccdf87">SongNoteEditor.ScaleNote()</link>, and <link linkend="_class_note_event_info_1a09db3f7bf93597788cd4e3e69c302651">SetStartEndTime()</link>.</para>
</section>
<anchor xml:id="_class_note_event_info_1a1e1aaa2a68e745c6854e4a4daa7da1ff"/><section>
    <title>triggered</title>
<indexterm><primary>triggered</primary><secondary>NoteEventInfo</secondary></indexterm>
<indexterm><primary>NoteEventInfo</primary><secondary>triggered</secondary></indexterm>
<para><computeroutput>bool NoteEventInfo.triggered</computeroutput></para><para>

<para>Has this note been triggered already? </para>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Assets/Scripts/<link linkend="__note_event_info_8cs">NoteEventInfo.cs</link></section>
</section>
