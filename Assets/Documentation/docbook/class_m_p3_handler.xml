<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_m_p3_handler" xml:lang="en-US">
<title>MP3Handler Class Reference</title>
<indexterm><primary>MP3Handler</primary></indexterm>
<para>

<para>Handles reading and playback of .MP3 Files. </para>
 
</para>
<para>Inheritance diagram for MP3Handler:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_p3_handler.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_m_p3_handler_1a6abc3c1b05f5d62f22d9c0a0a70d189e">SetVolume</link> (float newVolume)</para>

<para>set volume of Mp3 Playback. </para>
</listitem>
            <listitem><para>IEnumerator <link linkend="_class_m_p3_handler_1acbaa9148733b291e2d960a91a4a7a4c2">PlaySong</link> (string filePath)</para>

<para>Start parsing and playing the mp3 file. </para>
</listitem>
            <listitem><para>void <link linkend="_class_m_p3_handler_1acbf667dbde396f7908a02ec2ca2b8d85">StopMusic</link> ()</para>

<para>Stops all music playing from NAudio. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_m_p3_handler">MP3Handler</link> <link linkend="_class_m_p3_handler_1a0fa70fd58f86cdabb3c80f92f45c6ee2">instance</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_m_p3_handler_1a6e544ec4154b8fdeb23f84bbf499c6f2">Awake</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_m_p3_handler_1a4d8d86b68d842e2e6d5081368387a121">Update</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_m_p3_handler_1a835d2f60596e050066973fe5179844f3">ReadMP3File</link> (string path)</para>

<para>read Mp3 file at &quot;Path&quot; to play back through NAudio. </para>
</listitem>
            <listitem><para>void <link linkend="_class_m_p3_handler_1a5f75901a9c2b13ed3a4c8a7226ab56f4">OnDestroy</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>Thread <link linkend="_class_m_p3_handler_1adc6d80661dc9bbc888a7e1a587107f7e">audioThread</link></para>

<para>Thread used for audio playback. </para>
</listitem>
            <listitem><para>WaveOutEvent <link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link></para>

<para>WaveOut used to read and play MP3 Audio. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Handles reading and playback of .MP3 Files. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_m_p3_handler_1a6e544ec4154b8fdeb23f84bbf499c6f2"/><section>
    <title>Awake()</title>
<indexterm><primary>Awake</primary><secondary>MP3Handler</secondary></indexterm>
<indexterm><primary>MP3Handler</primary><secondary>Awake</secondary></indexterm>
<para><computeroutput>void MP3Handler.Awake ( )<computeroutput>[private]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">21 &#32;&#32;&#32;&#32;{
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_m_p3_handler_1a0fa70fd58f86cdabb3c80f92f45c6ee2">instance</link>&#32;==&#32;<emphasis role="keyword">null</emphasis>)
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1a0fa70fd58f86cdabb3c80f92f45c6ee2">instance</link>&#32;=&#32;<emphasis role="keyword">this</emphasis>;
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DontDestroyOnLoad(gameObject);
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;Destroy(<emphasis role="keyword">this</emphasis>);&#32;}
28 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_m_p3_handler_1a5f75901a9c2b13ed3a4c8a7226ab56f4"/><section>
    <title>OnDestroy()</title>
<indexterm><primary>OnDestroy</primary><secondary>MP3Handler</secondary></indexterm>
<indexterm><primary>MP3Handler</primary><secondary>OnDestroy</secondary></indexterm>
<para><computeroutput>void MP3Handler.OnDestroy ( )<computeroutput>[private]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">107 &#32;&#32;&#32;&#32;{
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stop&#32;and&#32;dispose&#32;of&#32;the&#32;WaveOutEvent&#32;and&#32;Mp3FileReader&#32;when&#32;the&#32;script&#32;is&#32;destroyed</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>.Stop();
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>.Dispose();
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
115 
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Abort&#32;the&#32;audio&#32;playback&#32;thread</emphasis>
117 
118 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_m_p3_handler_1acbaa9148733b291e2d960a91a4a7a4c2"/><section>
    <title>PlaySong()</title>
<indexterm><primary>PlaySong</primary><secondary>MP3Handler</secondary></indexterm>
<indexterm><primary>MP3Handler</primary><secondary>PlaySong</secondary></indexterm>
<para><computeroutput>IEnumerator MP3Handler.PlaySong (string filePath)</computeroutput></para><para>

<para>Start parsing and playing the mp3 file. </para>
</para>
<programlisting linenumbering="unnumbered">46 &#32;&#32;&#32;&#32;{
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1acbf667dbde396f7908a02ec2ca2b8d85">StopMusic</link>();
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!File.Exists(filePath))&#32;{&#32;Debug.LogError($<emphasis role="stringliteral">&quot;MP3&#32;File&#32;not&#32;found&#32;at&#32;path&#32;{filePath}&quot;</emphasis>);&#32;yield&#32;<emphasis role="keywordflow">break</emphasis>;&#32;}
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1adc6d80661dc9bbc888a7e1a587107f7e">audioThread</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Thread(()&#32;=&gt;&#32;<link linkend="_class_m_p3_handler_1a835d2f60596e050066973fe5179844f3">ReadMP3File</link>(filePath));
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitUntil(()&#32;=&gt;&#32;<link linkend="_class_game_manager">GameManager</link>.<link linkend="_class_game_manager_1a7666e8468dac197b9eb32dd32128524f">instance</link>.songTime&#32;&gt;=&#32;0);
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{&#32;<link linkend="_class_m_p3_handler_1adc6d80661dc9bbc888a7e1a587107f7e">audioThread</link>.Start();&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;{&#32;Debug.Log(<emphasis role="stringliteral">&quot;Error&#32;Starting&#32;thread.&quot;</emphasis>);&#32;}
52 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_m_p3_handler_1a835d2f60596e050066973fe5179844f3"/><section>
    <title>ReadMP3File()</title>
<indexterm><primary>ReadMP3File</primary><secondary>MP3Handler</secondary></indexterm>
<indexterm><primary>MP3Handler</primary><secondary>ReadMP3File</secondary></indexterm>
<para><computeroutput>void MP3Handler.ReadMP3File (string path)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>read Mp3 file at &quot;Path&quot; to play back through NAudio. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>path</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<programlisting linenumbering="unnumbered">59 &#32;&#32;&#32;&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>.IsNullOrEmpty(path))
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogError(<emphasis role="stringliteral">&quot;File&#32;path&#32;is&#32;empty&#32;or&#32;null.&quot;</emphasis>);
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
65 
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;new&#32;WaveFileReader&#32;with&#32;the&#32;provided&#32;path</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;reader&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Mp3FileReader(path))
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
69 
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;WaveOutEvent&#32;to&#32;play&#32;the&#32;audio</emphasis>
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;WaveOutEvent();
72 
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;WaveOutEvent&apos;s&#32;WaveStream&#32;to&#32;the&#32;Mp3FileReader</emphasis>
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>.Init(reader);
75 
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start&#32;playing&#32;the&#32;audio</emphasis>
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>.Play();
78 
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wait&#32;for&#32;the&#32;audio&#32;to&#32;finish&#32;playing</emphasis>
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>.PlaybackState&#32;==&#32;PlaybackState.Playing)
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;You&#32;can&#32;perform&#32;other&#32;tasks&#32;here&#32;while&#32;the&#32;audio&#32;is&#32;playing</emphasis>
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
85 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_m_p3_handler_1acbaa9148733b291e2d960a91a4a7a4c2">PlaySong()</link>.</para>
</section>
<anchor xml:id="_class_m_p3_handler_1a6abc3c1b05f5d62f22d9c0a0a70d189e"/><section>
    <title>SetVolume()</title>
<indexterm><primary>SetVolume</primary><secondary>MP3Handler</secondary></indexterm>
<indexterm><primary>MP3Handler</primary><secondary>SetVolume</secondary></indexterm>
<para><computeroutput>void MP3Handler.SetVolume (float newVolume)</computeroutput></para><para>

<para>set volume of Mp3 Playback. </para>
</para>
<programlisting linenumbering="unnumbered">37 &#32;&#32;&#32;&#32;{
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>;
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;waveOut.Volume&#32;=&#32;newVolume&#32;/&#32;100;
40 
41 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_m_p3_handler_1acbf667dbde396f7908a02ec2ca2b8d85"/><section>
    <title>StopMusic()</title>
<indexterm><primary>StopMusic</primary><secondary>MP3Handler</secondary></indexterm>
<indexterm><primary>MP3Handler</primary><secondary>StopMusic</secondary></indexterm>
<para><computeroutput>void MP3Handler.StopMusic ( )</computeroutput></para><para>

<para>Stops all music playing from NAudio. </para>
</para>
<programlisting linenumbering="unnumbered">91 &#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_m_p3_handler_1adc6d80661dc9bbc888a7e1a587107f7e">audioThread</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>.Stop();
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>.Dispose();
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_m_p3_handler_1adc6d80661dc9bbc888a7e1a587107f7e">audioThread</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_m_p3_handler_1adc6d80661dc9bbc888a7e1a587107f7e">audioThread</link>.IsAlive)
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_m_p3_handler_1adc6d80661dc9bbc888a7e1a587107f7e">audioThread</link>.Abort();
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
104 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_m_p3_handler_1acbaa9148733b291e2d960a91a4a7a4c2">PlaySong()</link>.</para>
</section>
<anchor xml:id="_class_m_p3_handler_1a4d8d86b68d842e2e6d5081368387a121"/><section>
    <title>Update()</title>
<indexterm><primary>Update</primary><secondary>MP3Handler</secondary></indexterm>
<indexterm><primary>MP3Handler</primary><secondary>Update</secondary></indexterm>
<para><computeroutput>void MP3Handler.Update ( )<computeroutput>[private]</computeroutput></computeroutput></para><programlisting linenumbering="unnumbered">30 &#32;&#32;&#32;&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59">waveOut</link>&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>;
32 &#32;&#32;&#32;&#32;}
</programlisting></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_m_p3_handler_1adc6d80661dc9bbc888a7e1a587107f7e"/><section>
    <title>audioThread</title>
<indexterm><primary>audioThread</primary><secondary>MP3Handler</secondary></indexterm>
<indexterm><primary>MP3Handler</primary><secondary>audioThread</secondary></indexterm>
<para><computeroutput>Thread MP3Handler.audioThread<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Thread used for audio playback. </para>
</para>
<para>
Referenced by <link linkend="_class_m_p3_handler_1acbaa9148733b291e2d960a91a4a7a4c2">PlaySong()</link>, and <link linkend="_class_m_p3_handler_1acbf667dbde396f7908a02ec2ca2b8d85">StopMusic()</link>.</para>
</section>
<anchor xml:id="_class_m_p3_handler_1a0fa70fd58f86cdabb3c80f92f45c6ee2"/><section>
    <title>instance</title>
<indexterm><primary>instance</primary><secondary>MP3Handler</secondary></indexterm>
<indexterm><primary>MP3Handler</primary><secondary>instance</secondary></indexterm>
<para><computeroutput><link linkend="_class_m_p3_handler">MP3Handler</link> MP3Handler.instance<computeroutput>[static]</computeroutput></computeroutput></para><para>
Referenced by <link linkend="_class_m_p3_handler_1a6e544ec4154b8fdeb23f84bbf499c6f2">Awake()</link>, <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">MidiInput.LoadSongFromCurrentSettings()</link>, <link linkend="_class_midi_input_1ace45aa85d323c88eb98970e6807bb548">MidiInput.StartSong()</link>, <link linkend="_class_midi_input_1a26a01dc684fded58c22a9124d779ea91">MidiInput.StartSong()</link>, <link linkend="_class_midi_input_1af90d7c9df4cd5549548550897346f923">MidiInput.StartSong()</link>, <link linkend="_class_midi_input_1a622c40a278ed57e97a5c965fb6f73470">MidiInput.StopSong()</link>, and <link linkend="_class_kiboard_debug_1ad7bab53c95904fa0774fa0fcaaf3aab3">KiboardDebug.VolumeOverride()</link>.</para>
</section>
<anchor xml:id="_class_m_p3_handler_1a5c20cb6d84a48405b9d36a8e88665b59"/><section>
    <title>waveOut</title>
<indexterm><primary>waveOut</primary><secondary>MP3Handler</secondary></indexterm>
<indexterm><primary>MP3Handler</primary><secondary>waveOut</secondary></indexterm>
<para><computeroutput>WaveOutEvent MP3Handler.waveOut<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>WaveOut used to read and play MP3 Audio. </para>
</para>
<para>
Referenced by <link linkend="_class_m_p3_handler_1a5f75901a9c2b13ed3a4c8a7226ab56f4">OnDestroy()</link>, <link linkend="_class_m_p3_handler_1a835d2f60596e050066973fe5179844f3">ReadMP3File()</link>, <link linkend="_class_m_p3_handler_1a6abc3c1b05f5d62f22d9c0a0a70d189e">SetVolume()</link>, <link linkend="_class_m_p3_handler_1acbf667dbde396f7908a02ec2ca2b8d85">StopMusic()</link>, and <link linkend="_class_m_p3_handler_1a4d8d86b68d842e2e6d5081368387a121">Update()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Assets/Scripts/<link linkend="__m_p3_handler_8cs">MP3Handler.cs</link></section>
</section>
