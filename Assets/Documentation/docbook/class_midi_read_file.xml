<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_midi_read_file" xml:lang="en-US">
<title>MidiReadFile Class Reference</title>
<indexterm><primary>MidiReadFile</primary></indexterm>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> <link linkend="_class_midi_read_file_1ae92e1f0a1a7c5b7219fe5d8647951219">GetNoteEventsFromFilePath</link> (string filePath)</para>

<para>Loads <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> from a given file path. </para>
</listitem>
            <listitem><para>static int <link linkend="_class_midi_read_file_1a8e7e3e4784f3f430c338ff138f4b92e3">CountNotes</link> ()</para>

<para>Counts total number of notes from the currently selected song, filtering out tempo change events. </para>
</listitem>
            <listitem><para>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> <link linkend="_class_midi_read_file_1a3958dca282906c32680b969cd5e6273f">GetDataFile</link> (string jsonFilePath)</para>

<para>Get <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> from Json data with given path. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> <link linkend="_class_midi_read_file_1a35980f4407241b68d3ec79bbd87cc153">ReadMidiFile</link> (string midiFilePath)</para>

<para>Get <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> from Midi data with given path. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Attributes    </title>
        <itemizedlist>
            <listitem><para>static Dictionary&lt; int, <link linkend="_class_note_event_info">NoteEventInfo</link> &gt; <link linkend="_class_midi_read_file_1a5991f7d70f889a853c88b08d86b01694">activeNotes</link> = new Dictionary&lt;int, <link linkend="_class_note_event_info">NoteEventInfo</link>&gt;()</para>

<para>Dictionary storing what notes are active at a given song time. Used to make sure you cannot press a note twice without releasing it. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_midi_read_file_1a8e7e3e4784f3f430c338ff138f4b92e3"/><section>
    <title>CountNotes()</title>
<indexterm><primary>CountNotes</primary><secondary>MidiReadFile</secondary></indexterm>
<indexterm><primary>MidiReadFile</primary><secondary>CountNotes</secondary></indexterm>
<para><computeroutput>static int MidiReadFile.CountNotes ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Counts total number of notes from the currently selected song, filtering out tempo change events. </para>
</para>

<para><formalpara><title>Returns</title>

<para>total number of notes in the currently selected song.</para>
</formalpara>
</para>
<programlisting linenumbering="unnumbered">45 &#32;&#32;&#32;&#32;{
46 
47 
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(File.Exists(GameSettings.currentSongPath))
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Path.GetExtension(GameSettings.currentSongPath)==<emphasis role="stringliteral">&quot;.json&quot;</emphasis>)
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;note&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_midi_read_file_1a3958dca282906c32680b969cd5e6273f">GetDataFile</link>(GameSettings.currentSongPath).NoteEvents)
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(note.startTime&#32;==&#32;Mathf.NegativeInfinity||note.noteNumber&#32;==&#32;<emphasis role="keywordtype">int</emphasis>.MinValue)
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//do&#32;nothin</emphasis>
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;count&#32;=&#32;0;&#32;&#32;}
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
64 
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Path.GetExtension(GameSettings.currentSongPath)&#32;==&#32;<emphasis role="stringliteral">&quot;.mid&quot;</emphasis>)
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CountFromMidi();
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogError(<emphasis role="stringliteral">&quot;Current&#32;Song&#32;Path&#32;Not&#32;Json&#32;or&#32;Midi&quot;</emphasis>);
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>.MinValue;
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogError(<emphasis role="stringliteral">&quot;NO&#32;.JSON/.MID&#32;FILE&#32;FOUND&#32;AT&#32;PATH:&#32;&quot;</emphasis>&#32;+&#32;GameSettings.currentSongPath);
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
81 
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;CountFromMidi()&#x240D;
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;noteOnCount&#32;=&#32;0;
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Load&#32;the&#32;MIDI&#32;file</emphasis>
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MidiFile&#32;midiFile&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;MidiFile(GameSettings.currentSongPath,&#32;<emphasis role="keyword">false</emphasis>);
87 
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterate&#32;through&#32;all&#32;track&#32;chunks&#32;in&#32;the&#32;MIDI&#32;file</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;trackChunk&#32;<emphasis role="keywordflow">in</emphasis>&#32;midiFile.Events)
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterate&#32;through&#32;all&#32;MIDI&#32;events&#32;in&#32;the&#32;track&#32;chunk</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;midiEvent&#32;<emphasis role="keywordflow">in</emphasis>&#32;trackChunk)
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;MIDI&#32;event&#32;is&#32;a&#32;NoteOn&#32;event</emphasis>
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(midiEvent.CommandCode&#32;==&#32;MidiCommandCode.NoteOn)
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteOnCount++;
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
101 
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;noteOnCount;
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
104 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_class_midi_read_file_1a3958dca282906c32680b969cd5e6273f"/><section>
    <title>GetDataFile()</title>
<indexterm><primary>GetDataFile</primary><secondary>MidiReadFile</secondary></indexterm>
<indexterm><primary>MidiReadFile</primary><secondary>GetDataFile</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> MidiReadFile.GetDataFile (string jsonFilePath)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Get <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> from Json data with given path. </para>
</para>
<programlisting linenumbering="unnumbered">111 &#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_midi_data_handler">MidiDataHandler</link>.<link linkend="_class_midi_data_handler_1a1a86dcda7551933ae1bad4ed606bc88a">GetJSONData</link>(jsonFilePath);
113 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_read_file_1a8e7e3e4784f3f430c338ff138f4b92e3">CountNotes()</link>, and <link linkend="_class_midi_read_file_1ae92e1f0a1a7c5b7219fe5d8647951219">GetNoteEventsFromFilePath()</link>.</para>
</section>
<anchor xml:id="_class_midi_read_file_1ae92e1f0a1a7c5b7219fe5d8647951219"/><section>
    <title>GetNoteEventsFromFilePath()</title>
<indexterm><primary>GetNoteEventsFromFilePath</primary><secondary>MidiReadFile</secondary></indexterm>
<indexterm><primary>MidiReadFile</primary><secondary>GetNoteEventsFromFilePath</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> MidiReadFile.GetNoteEventsFromFilePath (string filePath)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Loads <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> from a given file path. </para>
</para>
<programlisting linenumbering="unnumbered">18 &#32;&#32;&#32;&#32;{
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(File.Exists(filePath))
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21 
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Path.GetExtension(filePath)&#32;==&#32;<emphasis role="stringliteral">&quot;.json&quot;</emphasis>&#32;||&#32;Path.GetExtension(filePath)&#32;==&#32;<emphasis role="stringliteral">&quot;.replay&quot;</emphasis>)
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_midi_read_file_1a3958dca282906c32680b969cd5e6273f">GetDataFile</link>(filePath);
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Path.GetExtension(filePath)&#32;==&#32;<emphasis role="stringliteral">&quot;.mid&quot;</emphasis>)
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_midi_read_file_1a35980f4407241b68d3ec79bbd87cc153">ReadMidiFile</link>(filePath);
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogError(<emphasis role="stringliteral">&quot;NO&#32;.JSON/.REPLAY/.MID&#32;FILE&#32;FOUND&#32;AT&#32;PATH:&#32;&quot;</emphasis>+&#32;filePath);
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
37 
38 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_input_1a0e669343713e7dc8eb36f8fdbc5085ef">MidiInput.GetNoteEventWrapperFromSelectedSong()</link>, <link linkend="_class_midi_input_1a45fbc3ff0c86cf6739b2951fdb831037">MidiInput.LoadSongFromCurrentSettings()</link>, and <link linkend="_class_game_manager_1a4138c16110d65a2c6abdafa36fb0d99a">GameManager.RefreshJsonFiles()</link>.</para>
</section>
<anchor xml:id="_class_midi_read_file_1a35980f4407241b68d3ec79bbd87cc153"/><section>
    <title>ReadMidiFile()</title>
<indexterm><primary>ReadMidiFile</primary><secondary>MidiReadFile</secondary></indexterm>
<indexterm><primary>MidiReadFile</primary><secondary>ReadMidiFile</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> MidiReadFile.ReadMidiFile (string midiFilePath)<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Get <link linkend="_class_note_event_data_wrapper">NoteEventDataWrapper</link> from Midi data with given path. </para>
</para>
<programlisting linenumbering="unnumbered">119 &#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MidiFile&#32;midiFile&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;MidiFile(midiFilePath,&#32;<emphasis role="keyword">false</emphasis>);
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;bpm&#32;=&#32;0;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;NoteEventInfo&gt;&#32;noteEvents&#32;=&#32;<emphasis role="keyword">new</emphasis>();
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;trackChunk&#32;<emphasis role="keywordflow">in</emphasis>&#32;midiFile.Events)
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;midiEvent&#32;<emphasis role="keywordflow">in</emphasis>&#32;trackChunk)
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(midiEvent.CommandCode&#32;==&#32;MidiCommandCode.NoteOn)
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ProcessNoteOnEvent((NoteEvent)midiEvent);
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(midiEvent.CommandCode&#32;==&#32;MidiCommandCode.NoteOff)
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ProcessNoteOffEvent((NoteEvent)midiEvent);
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(midiEvent.CommandCode&#32;==&#32;MidiCommandCode.MetaEvent)
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MetaEvent&#32;metaEvent&#32;=&#32;(MetaEvent)midiEvent;
138 
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;tempo&#32;events</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(metaEvent.MetaEventType&#32;==&#32;MetaEventType.SetTempo)
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TempoEvent&#32;tempoEvent&#32;=&#32;(TempoEvent)metaEvent;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;microsecondsPerQuarterNote&#32;=&#32;tempoEvent.MicrosecondsPerQuarterNote;
144 
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bpm&#32;=&#32;60000000f&#32;/&#32;microsecondsPerQuarterNote;
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Process&#32;tempo&#32;event&#32;as&#32;needed</emphasis>
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ProcessTempoChange(tempoEvent);
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;more&#32;conditions&#32;as&#32;needed&#32;for&#32;other&#32;meta-event&#32;types</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bpm&#32;==&#32;0)&#32;{&#32;Debug.LogError(<emphasis role="stringliteral">&quot;BPM&#32;WAS&#32;NOT&#32;FOUND/&#32;IS&#32;0.&quot;</emphasis>);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;&#32;}
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_midi_data_handler">MidiDataHandler</link>.<link linkend="_class_midi_data_handler_1a2f657c39727c406846f224d4175f62b2">SaveNoteEventData</link>(<emphasis role="stringliteral">&quot;.json&quot;</emphasis>,&#32;bpm,&#32;noteEvents);
156 
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ProcessTempoChange(TempoEvent&#32;tempoChangeEvent)&#x240D;
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;bpm&#32;=&#32;60000000f&#32;/&#32;tempoChangeEvent.MicrosecondsPerQuarterNote;
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteEvents.Add(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_note_event_info">NoteEventInfo</link>(bpm));
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
163 
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ProcessNoteOnEvent(NoteEvent&#32;noteOnEvent)<emphasis role="comment">//```````````````````````````````````````````````````````modify&#32;so&#32;if&#32;you&#32;(somehow&#32;)&#32;press&#32;a&#32;note&#32;2&#32;times&#32;before&#32;you&#32;let&#32;go&#32;of&#32;the&#32;first&#32;note,&#32;it&#32;marks&#32;its&#32;end&#32;time.</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;noteNumber&#32;=&#32;noteOnEvent.NoteNumber;
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;ticksPerQuarterNote&#32;=&#32;96;&#32;<emphasis role="comment">//&#32;Adjust&#32;this&#32;based&#32;on&#32;your&#32;DAW</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;secondsPerTick&#32;=&#32;60.0f&#32;/&#32;(bpm&#32;*&#32;ticksPerQuarterNote);
170 
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Then,&#32;use&#32;secondsPerTick&#32;in&#32;your&#32;timing&#32;calculations</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;startTime&#32;=&#32;noteOnEvent.AbsoluteTime&#32;*&#32;secondsPerTick;
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;MIDI&#32;note&#32;number&#32;to&#32;note&#32;name</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;noteName&#32;=&#32;ConvertNoteNumberToName(noteNumber);
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;new&#32;NoteEventInfo&#32;or&#32;update&#32;an&#32;existing&#32;one</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;new&#32;NoteEventInfo&#32;for&#32;the&#32;note</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_note_event_info">NoteEventInfo</link>&#32;noteEventInfo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_note_event_info">NoteEventInfo</link>
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteNumber&#32;=&#32;noteNumber,
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startTime&#32;=&#32;startTime
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_midi_read_file_1a5991f7d70f889a853c88b08d86b01694">activeNotes</link>.ContainsKey(noteNumber))
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_read_file_1a5991f7d70f889a853c88b08d86b01694">activeNotes</link>.Add(noteNumber,&#32;noteEventInfo);
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noteEvents.Add(noteEventInfo);
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
190 
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ProcessNoteOffEvent(NoteEvent&#32;noteOffEvent)&#x240D;
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;noteNumber&#32;=&#32;noteOffEvent.NoteNumber;
194 
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;ticksPerQuarterNote&#32;=&#32;96;&#32;<emphasis role="comment">//&#32;Adjust&#32;this&#32;based&#32;on&#32;your&#32;DAW</emphasis>
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;secondsPerTick&#32;=&#32;60.0f&#32;/&#32;(bpm&#32;*&#32;ticksPerQuarterNote);
197 
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;the&#32;value&#32;of&#32;noteOffEvent.AbsoluteTime</emphasis>
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;end&#32;time&#32;in&#32;seconds</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;endTime&#32;=&#32;noteOffEvent.AbsoluteTime&#32;*&#32;secondsPerTick;
202 
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;note&#32;is&#32;in&#32;the&#32;activeNotes&#32;dictionary</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_midi_read_file_1a5991f7d70f889a853c88b08d86b01694">activeNotes</link>.TryGetValue(noteNumber,&#32;out&#32;<link linkend="_class_note_event_info">NoteEventInfo</link>&#32;activeNote))
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;activeNote.endTime&#32;=&#32;endTime;
207 
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Optionally,&#32;add&#32;the&#32;activeNote&#32;to&#32;your&#32;noteEvents&#32;list&#32;if&#32;you&#32;want&#32;to&#32;keep&#32;track&#32;of&#32;all&#32;notes</emphasis>
209 
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;the&#32;note&#32;from&#32;the&#32;activeNotes&#32;dictionary&#32;since&#32;it&apos;s&#32;no&#32;longer&#32;active</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_midi_read_file_1a5991f7d70f889a853c88b08d86b01694">activeNotes</link>.Remove(noteNumber);
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
215 
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
218 
219 
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;ConvertNoteNumberToName(<emphasis role="keywordtype">int</emphasis>&#32;noteNumber)&#x240D;
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;noteNames&#32;=&#32;{&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;C#&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;D&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;D#&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;E&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;F&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;F#&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;G&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;G#&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;A&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;A#&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;B&quot;</emphasis>&#32;};
224 
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;octave&#32;=&#32;(noteNumber&#32;/&#32;12);
226 
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;noteIndex&#32;=&#32;noteNumber&#32;%&#32;12;
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;noteName&#32;=&#32;noteNames[noteIndex];
229 
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;$<emphasis role="stringliteral">&quot;{noteName}{octave}&quot;</emphasis>;
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
232 
233 
234 
235 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_class_midi_read_file_1ae92e1f0a1a7c5b7219fe5d8647951219">GetNoteEventsFromFilePath()</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_midi_read_file_1a5991f7d70f889a853c88b08d86b01694"/><section>
    <title>activeNotes</title>
<indexterm><primary>activeNotes</primary><secondary>MidiReadFile</secondary></indexterm>
<indexterm><primary>MidiReadFile</primary><secondary>activeNotes</secondary></indexterm>
<para><computeroutput>Dictionary&lt;int, <link linkend="_class_note_event_info">NoteEventInfo</link>&gt; MidiReadFile.activeNotes = new Dictionary&lt;int, <link linkend="_class_note_event_info">NoteEventInfo</link>&gt;()<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Dictionary storing what notes are active at a given song time. Used to make sure you cannot press a note twice without releasing it. </para>
</para>
<para>
Referenced by <link linkend="_class_midi_read_file_1a35980f4407241b68d3ec79bbd87cc153">ReadMidiFile()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Assets/Scripts/<link linkend="__midi_read_file_8cs">MidiReadFile.cs</link></section>
</section>
