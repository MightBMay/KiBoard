.TH "GameManager" 3 "Version 1.0.0" "KiBoard GDD & Technical Documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GameManager
.SH SYNOPSIS
.br
.PP
.PP
Inherits MonoBehaviour\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBAssignFpsText\fP (TMP_InputField text)"
.br
.RI "Assigns text parameter's \&.text feild to the current target FPS\&. "
.ti -1c
.RI "void \fBSetFPS\fP (string str)"
.br
.RI "Sets Application\&.targetFrameRate to 'str' parsed\&. "
.ti -1c
.RI "void \fBSetInputDelay\fP (string delayStr)"
.br
.RI "Sets PlayerSettings\&.inputDelay to 'delayStr' parsed\&. "
.ti -1c
.RI "void \fBUpdateSongTime\fP ()"
.br
.RI "Updates \fBsongTime\fP variable with Time\&.deltaTime\&. "
.ti -1c
.RI "void \fBSetSongTotalNotes\fP (int noteCount)"
.br
.RI "Sets \fBtotalNotes\fP to the total number of notes in the song\&. "
.ti -1c
.RI "IEnumerator \fBPrepareNotes\fP (float BPM, List< \fBNoteEventInfo\fP > noteEvents, bool isPreview)"
.br
.RI "Prepares notes for a song to be played\&. "
.ti -1c
.RI "void \fBStopReadiedNotes\fP ()"
.br
.RI "Stops all coroutines for preparing notes\&. "
.ti -1c
.RI "void \fBUpdatePlayerScore\fP (string score)"
.br
.RI "Updates the player's score based on the hit timing\&. "
.ti -1c
.RI "string \fBConvertNoteNumberToName\fP (int noteNumber)"
.br
.RI "Converts a MIDI note number to its corresponding name\&. "
.ti -1c
.RI "void \fBOnSongEnd\fP ()"
.br
.RI "Coroutine for handling song end actions\&. "
.ti -1c
.RI "void \fBReturnToSongSelection\fP ()"
.br
.RI "Returns to the song selection scene\&. "
.ti -1c
.RI "void \fBStopSong\fP ()"
.br
.RI "Stops all prepared notes and stops updating of songTime\&. "
.ti -1c
.RI "void \fBRefreshJsonFiles\fP ()"
.br
.RI "Reloads all json file versions of the currently selected song\&. "
.ti -1c
.RI "void \fBSetBeatsBeforeDrop\fP (string num)"
.br
.RI "Sets \fBbeatsBeforeNote\fP\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBCheckSpawnNote\fP (\fBNoteEventInfo\fP note)"
.br
.RI "Used to check if a noteEvent is storing Tempo Data or Note Data\&. i assign tempo changes by setting the \fBNoteEventInfo\&.startTime\fP to negative infinity and the \fBNoteEventInfo\&.noteNumber\fP to min value, with the tempo as the end time\&. "
.ti -1c
.RI "static int \fBConvertNoteNameToNumber\fP (string noteName)"
.br
.RI "Converts a note name to its corresponding MIDI note number\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "GameObject \fBnotePrefab\fP"
.br
.RI "prefab used for instantiating notes\&. "
.ti -1c
.RI "\fBSongScore\fP \fBcurrentSongScore\fP"
.br
.RI "\fBSongScore\fP for currently playing song\&. "
.ti -1c
.RI "\fBSongScore\fP \fBselectedSongHighScore\fP"
.br
.RI "\fBSongScore\fP storing the High score for the currently selected song\&. "
.ti -1c
.RI "\fBCombo\fP \fBcombo\fP = new()"
.br
.RI "Current \fBCombo\fP for the song\&. "
.ti -1c
.RI "bool \fBinEditor\fP"
.br
.RI "Is the game in the SongEditor State? "
.ti -1c
.RI "bool \fBstartTimer\fP"
.br
.RI "Should \fBsongTime\fP be updated? "
.ti -1c
.RI "bool \fBisCurSongPreview\fP"
.br
.RI "Is the currently playing song appearing in the preview window in the Song Selection scene\&. "
.ti -1c
.RI "float \fBsongTime\fP"
.br
.RI "Elapsed duration (seconds) into the currently playing song\&. "
.ti -1c
.RI "float \fBmodifiedNoteScale\fP"
.br
.RI "Note scaling factor calculated by the song BPM at the time of the notes appearence in the song\&.
.br
 See also 
.PP
\fBSee also\fP
.RS 4
\fBbaseNoteScalingFactor\fP
.PP
.RE
.PP
"
.ti -1c
.RI "int \fBbeatsBeforeNote\fP = 4"
.br
.RI "Number of beats a note should spawn before being visible on screen\&. 
.br
 Modification changes the speed notes fall, and changes the amount of time players have to react to notes\&. "
.ti -1c
.RI "int \fBtotalNotes\fP"
.br
.RI "Total number of notes in the currently playing song\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBGameManager\fP \fBinstance\fP"
.br
.RI "singleton reference\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBAwake\fP ()"
.br
.ti -1c
.RI "void \fBUpdate\fP ()"
.br
.ti -1c
.RI "void \fBAssignToPreviewLayer\fP (GameObject obj)"
.br
.RI "Assigns 'obk' to the layer 'PreviewLayer', then moves it and all children objects to the song preview scene\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "float \fBscreenHeight\fP"
.br
.RI "Height of the viewport in Units, as viewed from an angle in the game view\&. "
.ti -1c
.RI "float \fBfallSpeed\fP"
.br
.ti -1c
.RI "float \fBspawnOffset\fP = 2f"
.br
.ti -1c
.RI "float \fBbaseNoteScalingFactor\fP = 5\&.4f"
.br
.RI "Base scaling factor for notes to be modified by BPM of the song\&.
.br
 do not ask me where the 5\&.4 came from i do not know\&. "
.ti -1c
.RI "Transform \fBnoteHolder\fP"
.br
.ti -1c
.RI "List< Coroutine > \fBreadiedNotes\fP = new()"
.br
.RI "List holding all note prepared but not yet spawned\&. "
.ti -1c
.RI "string[] \fBnoteNames\fP = { 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', }"
.br
.RI "String array containing the names of notes accoring to their indecies, 0 being C\&. "
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static Dictionary< string, int > \fBnameToNoteMap\fP"
.br
.RI "Dictionary mapping of note names to note numbers\&. "
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "void GameManager\&.AssignFpsText (TMP_InputField text)"

.PP
Assigns text parameter's \&.text feild to the current target FPS\&. 
.PP
\fBParameters\fP
.RS 4
\fItext\fP TextMeshPro to have string assigned to\&.
.RE
.PP

.nf
124     {
125         text\&.text = Application\&.targetFrameRate\&.ToString();
126     }
.PP
.fi

.SS "void GameManager\&.AssignToPreviewLayer (GameObject obj)\fR [private]\fP"

.PP
Assigns 'obk' to the layer 'PreviewLayer', then moves it and all children objects to the song preview scene\&. 
.PP
\fBParameters\fP
.RS 4
\fIobj\fP object to have layer assigned\&.
.RE
.PP

.nf
322     {
323 
324         // Assign the object to the "PreviewLayer"
325         LayerMask layer = LayerMask\&.NameToLayer("PreviewLayer");
326         try { SceneManager\&.MoveGameObjectToScene(obj, MidiInput\&.instance\&.currentPreview); } catch { }
327 
328         foreach (Transform child in obj\&.GetComponentsInChildren<Transform>(true))
329         {
330             child\&.gameObject\&.layer = layer;
331         }
332     }
.PP
.fi

.PP
Referenced by \fBPrepareNotes()\fP\&.
.SS "void GameManager\&.Awake ()\fR [private]\fP"

.nf
112     {
113         if (instance == null)
114         {
115             instance = this;
116         }
117         else { Destroy(gameObject); }
118     }
.PP
.fi

.SS "static bool GameManager\&.CheckSpawnNote (\fBNoteEventInfo\fP note)\fR [static]\fP"

.PP
Used to check if a noteEvent is storing Tempo Data or Note Data\&. i assign tempo changes by setting the \fBNoteEventInfo\&.startTime\fP to negative infinity and the \fBNoteEventInfo\&.noteNumber\fP to min value, with the tempo as the end time\&. 
.PP
\fBParameters\fP
.RS 4
\fInote\fP note to check for tempo data\&.
.RE
.PP
\fBReturns\fP
.RS 4
True = note data, false = tempo data\&.
.RE
.PP

.nf
184     {
185         return (note\&.startTime == float\&.NegativeInfinity && note\&.noteNumber == int\&.MinValue);
186     }
.PP
.fi

.PP
Referenced by \fBPrepareNotes()\fP\&.
.SS "static int GameManager\&.ConvertNoteNameToNumber (string noteName)\fR [static]\fP"

.PP
Converts a note name to its corresponding MIDI note number\&. 
.PP
\fBParameters\fP
.RS 4
\fInoteName\fP The note name (e\&.g\&., C, C#, D)\&.
.RE
.PP
\fBReturns\fP
.RS 4
The MIDI note number\&.
.RE
.PP

.nf
381     {
382         if (!char\&.IsDigit(noteName[0]))
383         {
384             int octave = 0;
385 
386             for (int i = 0; i < noteName\&.Length; i++)
387             {
388                 if (char\&.IsDigit(noteName[i]))
389                 {
390                     octave = noteName[i];
391                 }
392             }
393             nameToNoteMap\&.TryGetValue(noteName\&.ToLower(), out int value);
394 
395             return value + (12 * octave);
396         }
397         return int\&.Parse(noteName);
398 
399     }
.PP
.fi

.SS "string GameManager\&.ConvertNoteNumberToName (int noteNumber)"

.PP
Converts a MIDI note number to its corresponding name\&. 
.PP
\fBParameters\fP
.RS 4
\fInoteNumber\fP The MIDI note number\&.
.RE
.PP
\fBReturns\fP
.RS 4
The note name (e\&.g\&., C, C#, D)\&.
.RE
.PP

.nf
363     {
364 
365         int octave = (noteNumber / 12) \- 1;
366 
367         int noteIndex = (noteNumber) % 12;
368         string noteName = noteNames[noteIndex];
369         if (GameSettings\&.usePiano)
370         {
371             return $"{noteName} {octave}";
372         }
373         return $"{noteName}";
374     }
.PP
.fi

.SS "void GameManager\&.OnSongEnd ()"

.PP
Coroutine for handling song end actions\&. 
.nf
405     {
406         startTimer = false;
407         MidiInput\&.instance\&.takeInput = false;
408         int[] score = currentSongScore\&.GetScoreArray(totalNotes);
409 
410         if (!isCurSongPreview) { EndSongMessage\&.instance?\&.ShowScore($"Total Score: {score[0]}\\nPerfect: {score[1]}\\nGood: {score[2]}\\nOkay: {score[3]}\\nExtra: {score[4]}\\nMissed: {score[5]}\\nLongest Combo: {combo\&.highestCount}", currentSongScore\&.FinalizeScore()); }
411         else { FindObjectOfType<EndPreview>()?\&.EndPreviewFade(); }
412 
413         if (!Replay\&.isPlayingReplay) { MidiDataHandler\&.SaveNoteEventData("\&.replay", Replay\&.instance\&.replayNoteData); } // only record replays if you arent playing back a replay\&.
414 
415     }
.PP
.fi

.SS "IEnumerator GameManager\&.PrepareNotes (float BPM, List< \fBNoteEventInfo\fP > noteEvents, bool isPreview)"

.PP
Prepares notes for a song to be played\&. 
.PP
\fBParameters\fP
.RS 4
\fIBPM\fP Starting BPM of selected song
.br
\fInoteEvents\fP List of \fBNoteEventInfo\fP's to be played\&.
.br
\fIisPreview\fP Is the song in the Song Selection Preview Window?
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.nf
195     {
196         if (noteEvents == null) { Debug\&.Log("gameloop noteEvents null"); yield break; }
197         GameType? gameType = GameSettings\&.gameType = GameSettings\&.usePiano ? GameType\&.Key88 : GameType\&.Key12;
198 
199         SetSongTotalNotes(noteEvents\&.Count);
200         SongScore songScore = new();
201         if (isPreview) { isCurSongPreview = true; } else { isCurSongPreview = false; }
202         songTime = \-3f \- (130 / BPM);
203         if (!isCurSongPreview) { Replay\&.recordReplay = true; Replay\&.StartReplayCapture(); }
204         else { Replay\&.recordReplay = false; }
205         screenHeight = 40\&.16f;//2f * Camera\&.main\&.orthographicSize;
206         AssignSongValues(BPM);
207 
208         yield return new WaitForSecondsRealtime(1f);
209         yield return new WaitUntil(() => (Input\&.anyKeyDown || MidiInput\&.instance\&.GetAnyNoteActive()) || isPreview);
210         startTimer = true;
211         StopReadiedNotes();
212         if (gameType == GameType\&.Key88) { noteEvents\&.ForEach(noteEvent => readiedNotes\&.Add(StartCoroutine(ReadyNote88(noteEvent\&.startTime, noteEvent)))); }
213         else if (gameType == GameType\&.Key12) { noteEvents\&.ForEach(noteEvent => readiedNotes\&.Add(StartCoroutine(ReadyNote12(noteEvent\&.startTime, noteEvent)))); }
214         else
215         {
216             Debug\&.LogError("Game type not 88 or 12 key mode\&.");
217         }
218 
219         // Game loop is finished
220         yield return null;
221 
222         void AssignSongValues(float BPM)
223         {
224 
225             spawnOffset = (beatsBeforeNote * 60f / BPM);
226             // Calculate the speed based on the distance and duration
227             fallSpeed = (screenHeight / spawnOffset);
228 
229             modifiedNoteScale = baseNoteScalingFactor * (130 / BPM);
230         }
231 
232         float TempoChange(NoteEventInfo note)
233         {
234             BPM = note\&.endTime;
235             float so = (beatsBeforeNote * 60f / BPM);
236             fallSpeed = (screenHeight / so);
237             modifiedNoteScale = baseNoteScalingFactor * (130 / BPM);
238             return so;
239         }
240         IEnumerator ReadyNote88(float spawnTime, NoteEventInfo noteEvent)
241         {
242 
243             if (CheckSpawnNote(noteEvent))
244             {
245                 spawnOffset = TempoChange(noteEvent);
246                 yield break;
247 
248             }
249             float trueSpawnTime = spawnTime \- spawnOffset;
250             yield return new WaitUntil(() => songTime >= trueSpawnTime);
251             SpawnNote88(noteEvent);
252         }
253         IEnumerator ReadyNote12(float spawnTime, NoteEventInfo noteEvent)
254         {
255             if (CheckSpawnNote(noteEvent))
256             {
257                 spawnOffset = TempoChange(noteEvent);
258                 AssignSongValues(noteEvent\&.endTime);
259 
260             }
261             float trueSpawnTime = spawnTime \- spawnOffset;
262             yield return new WaitUntil(() => songTime >= trueSpawnTime);
263             SpawnNote12(noteEvent);
264         }
265 
266         void SpawnNote88(NoteEventInfo noteEvent)
267         {
268 
269             // scale/length of the note deterimned by the note duration, and a scaling factor (~~~~~~~~~~~~~~~~~BASE THIS ON MF BPM)``````````````````````````````````````````````````````````````````````````````````
270             float noteScale = (noteEvent\&.endTime \- noteEvent\&.startTime) * modifiedNoteScale;
271             //spawn a note and store a reference\&.
272             GameObject noteInstance = Instantiate(notePrefab, new Vector3(\-13\&.2f + (0\&.20505f * (noteEvent\&.noteNumber)), (screenHeight) + (noteScale / 2) \- 2\&.5f, 0f), Quaternion\&.identity);
273             FallingNote fallingNote = noteInstance\&.GetComponent<FallingNote>();
274             SpriteRenderer spriteRenderer = noteInstance\&.GetComponent<SpriteRenderer>();
275             fallingNote\&.velocity = fallSpeed; // set falling speed of the note to the value calculated in AssignSongValues()
276             fallingNote\&.maxYBound = spriteRenderer\&.bounds\&.max\&.y; //Used to determine when a note is far enough off screen to be destroyed\&.
277             fallingNote\&.GetComponentInChildren<NoteShadow>()\&.SetShadowSize(noteScale + 0\&.075f);
278             if (noteHolder != null)
279             {
280                 noteInstance\&.transform\&.SetParent(noteHolder\&.transform, false);
281             }
282             spriteRenderer\&.size = new Vector2(spriteRenderer\&.size\&.x, noteScale);
283 
284 
285             if (noteEvent == noteEvents[noteEvents\&.Count \- 1]) // check if note is the final note\&.
286             {
287                 fallingNote\&.isLast = true;// set flag to end song after the last note is destroyed\&.
288 
289             }
290             if (isPreview) AssignToPreviewLayer(noteInstance);
291         }
292         void SpawnNote12(NoteEventInfo noteEvent)
293         {
294             // scale/length of the note deterimned by the note duration, and a scaling factor  (~~~~~~~~~~~~~~~~~BASE THIS ON MF BPM)``````````````````````````````````````````````````````````````````````````````````
295             float noteScale = (noteEvent\&.endTime \- noteEvent\&.startTime) * modifiedNoteScale;
296             //spawn a note and store a reference\&.
297             GameObject noteInstance = Instantiate(notePrefab, new Vector3(\-5\&.6f + (1 * (noteEvent\&.noteNumber % 12)), (screenHeight) + (noteScale / 2) \- 2\&.5f, 0f), Quaternion\&.identity);
298             FallingNote fallingNote = noteInstance\&.GetComponent<FallingNote>();
299             SpriteRenderer spriteRenderer = noteInstance\&.GetComponent<SpriteRenderer>();
300             fallingNote\&.velocity = fallSpeed; // set falling speed of the note to the value calculated in AssignSongValues()
301             fallingNote\&.maxYBound = spriteRenderer\&.bounds\&.max\&.y; //Used to determine when a note is far enough off screen to be destroyed\&.
302             fallingNote\&.GetComponentInChildren<NoteShadow>()\&.SetShadowSize(noteScale + 0\&.075f);
303 
304             spriteRenderer\&.size = new Vector2(4\&.5f, noteScale);
305 
306 
307             if (noteEvent == noteEvents[noteEvents\&.Count \- 1]) // check if note is the final note\&.
308             {
309                 fallingNote\&.isLast = true;// set flag to end song after the last note is destroyed\&.
310 
311 
312             }
313             if (isPreview) AssignToPreviewLayer(noteInstance);
314         }
315     }
.PP
.fi

.SS "void GameManager\&.RefreshJsonFiles ()"

.PP
Reloads all json file versions of the currently selected song\&. 
.nf
461     {
462         NoteEventDataWrapper temp = MidiReadFile\&.GetNoteEventsFromFilePath(GameSettings\&.currentSongPath);
463         MidiDataHandler\&.SaveNoteEventData("\&.json", temp\&.BPM, temp\&.NoteEvents);
464 
465     }
.PP
.fi

.SS "void GameManager\&.ReturnToSongSelection ()"

.PP
Returns to the song selection scene\&. 
.nf
423     {
424         startTimer = false;
425         inEditor = false;
426         StopReadiedNotes();
427         MidiInput\&.instance\&.inGame = false;
428         GameSettings\&.ResetSettings(false);
429         MidiInput\&.instance\&.UnHookMidiDevice();
430 
431         try { TransitionManager\&.instance\&.LoadNewScene("SongSelect"); }
432         catch { SceneManager\&.LoadScene("SongSelect"); }
433 
434     }
.PP
.fi

.SS "void GameManager\&.SetBeatsBeforeDrop (string num)"

.PP
Sets \fBbeatsBeforeNote\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fInum\fP new \fBbeatsBeforeNote\fPbeatsBeforeNoteValue
.RE
.PP

.nf
472     {
473         if (!int\&.TryParse(num, out int newNum))
474         {
475             if (newNum <= 0) { Debug\&.LogWarning("BeatBeforeDrop Setting attempted to be set to <=0"); return; }
476             Debug\&.LogError("Non Int Input into Beats Before Drop Setting"); return;
477         }
478         beatsBeforeNote = newNum;
479         Debug\&.Log($"{newNum} Beats before note");
480     }
.PP
.fi

.SS "void GameManager\&.SetFPS (string str)"

.PP
Sets Application\&.targetFrameRate to 'str' parsed\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP Value to set FPS to\&.
.RE
.PP

.nf
132     {
133         if (int\&.TryParse(str, out int newFps))
134         {
135             Application\&.targetFrameRate = newFps;
136         }
137         else { Debug\&.LogError($"FPS Cap of : {str} is invalid"); }
138     }
.PP
.fi

.SS "void GameManager\&.SetInputDelay (string delayStr)"

.PP
Sets PlayerSettings\&.inputDelay to 'delayStr' parsed\&. 
.PP
\fBParameters\fP
.RS 4
\fIdelayStr\fP 
.RE
.PP

.nf
144     {
145         if (int\&.TryParse(delayStr, out int delay))
146         {
147             PlayerSettings\&.inputDelay = delay;
148         }
149         else { Debug\&.Log("Error Parsing input delay"); }
150     }
.PP
.fi

.SS "void GameManager\&.SetSongTotalNotes (int noteCount)"

.PP
Sets \fBtotalNotes\fP to the total number of notes in the song\&. 
.PP
\fBParameters\fP
.RS 4
\fInoteCount\fP The total number of notes\&.
.RE
.PP

.nf
172     {
173         totalNotes = noteCount;
174     }
.PP
.fi

.PP
Referenced by \fBPrepareNotes()\fP\&.
.SS "void GameManager\&.StopReadiedNotes ()"

.PP
Stops all coroutines for preparing notes\&. 
.nf
337     {
338         foreach (Coroutine c in readiedNotes)
339         {
340             if (c != null)
341             {
342                 StopCoroutine(c);
343             }
344         }
345         readiedNotes\&.Clear();
346     }
.PP
.fi

.PP
Referenced by \fBPrepareNotes()\fP, \fBReturnToSongSelection()\fP, and \fBStopSong()\fP\&.
.SS "void GameManager\&.StopSong ()"

.PP
Stops all prepared notes and stops updating of songTime\&. 
.nf
440     {
441         startTimer = false;
442         StopReadiedNotes();
443         MidiInput\&.instance\&.inGame = false;
444     }
.PP
.fi

.SS "void GameManager\&.Update ()\fR [private]\fP"

.nf
153     {
154         UpdateSongTime();
155     }
.PP
.fi

.SS "void GameManager\&.UpdatePlayerScore (string score)"

.PP
Updates the player's score based on the hit timing\&. 
.PP
\fBParameters\fP
.RS 4
\fIscore\fP The hit score (Perfect, Good, Okay, Miss)\&.
.RE
.PP

.nf
352     {
353         currentSongScore ??= new();
354         currentSongScore\&.AddScore(score);
355 
356     }
.PP
.fi

.SS "void GameManager\&.UpdateSongTime ()"

.PP
Updates \fBsongTime\fP variable with Time\&.deltaTime\&. 
.nf
160     {
161         if (startTimer)
162         {
163             songTime += Time\&.deltaTime;
164         }
165     }
.PP
.fi

.PP
Referenced by \fBUpdate()\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "float GameManager\&.baseNoteScalingFactor = 5\&.4f\fR [private]\fP"

.PP
Base scaling factor for notes to be modified by BPM of the song\&.
.br
 do not ask me where the 5\&.4 came from i do not know\&. 
.PP
Referenced by \fBPrepareNotes()\fP\&.
.SS "int GameManager\&.beatsBeforeNote = 4"

.PP
Number of beats a note should spawn before being visible on screen\&. 
.br
 Modification changes the speed notes fall, and changes the amount of time players have to react to notes\&. 
.PP
Referenced by \fBPrepareNotes()\fP, and \fBSetBeatsBeforeDrop()\fP\&.
.SS "\fBCombo\fP GameManager\&.combo = new()"

.PP
Current \fBCombo\fP for the song\&. 
.SS "\fBSongScore\fP GameManager\&.currentSongScore"

.PP
\fBSongScore\fP for currently playing song\&. 
.PP
Referenced by \fBOnSongEnd()\fP, and \fBUpdatePlayerScore()\fP\&.
.SS "float GameManager\&.fallSpeed\fR [private]\fP"

.PP
Referenced by \fBPrepareNotes()\fP\&.
.SS "bool GameManager\&.inEditor"

.PP
Is the game in the SongEditor State? 
.PP
Referenced by \fBReturnToSongSelection()\fP\&.
.SS "\fBGameManager\fP GameManager\&.instance\fR [static]\fP"

.PP
singleton reference\&. 
.PP
Referenced by \fBSongScore\&.AddScore()\fP, \fBAwake()\fP, \fBGameUI\&.CreateTimingText()\fP, \fBSongScore\&.FinalizeScore()\fP, \fBMidiInput\&.GetTimeDifference()\fP, \fBMidiInput\&.LoadSongFromCurrentSettings()\fP, \fBMidiInput\&.NoteOff()\fP, \fBMidiInput\&.NoteOn()\fP, \fBFallingNote\&.OnDestroy()\fP, \fBMP3Handler\&.PlaySong()\fP, \fBSongNoteEditor\&.RescaleNotesFromBPM()\fP, \fBExtraSongInfoMenu\&.SetText()\fP, \fBMidiInput\&.StartSong()\fP, \fBMidiInput\&.StartSong()\fP, \fBMidiInput\&.StartSong()\fP, \fBMidiInput\&.StopSong()\fP, and \fBGameUI\&.Update()\fP\&.
.SS "bool GameManager\&.isCurSongPreview"

.PP
Is the currently playing song appearing in the preview window in the Song Selection scene\&. 
.PP
Referenced by \fBOnSongEnd()\fP, and \fBPrepareNotes()\fP\&.
.SS "float GameManager\&.modifiedNoteScale"

.PP
Note scaling factor calculated by the song BPM at the time of the notes appearence in the song\&.
.br
 See also 
.PP
\fBSee also\fP
.RS 4
\fBbaseNoteScalingFactor\fP
.PP
.RE
.PP

.PP
Referenced by \fBPrepareNotes()\fP\&.
.SS "Dictionary<string, int> GameManager\&.nameToNoteMap\fR [static]\fP, \fR [private]\fP"
\fBInitial value:\fP
.nf
= new()
    {
        { "cb", 12 },
        { "c", 1 },
        { "c#", 2 },
        { "db", 2 },
        { "d", 3 },
        { "d#", 4 },
        { "eb", 4 },
        { "e", 5 },
        { "e#", 6 },
        { "fb", 5 },
        { "f", 6 },
        { "f#", 7 },
        { "gb", 7 },
        { "g", 8 },
        { "g#", 9 },
        { "ab", 9 },
        { "a", 10 },
        { "a#", 11 },
        { "bb", 11 },
        { "b", 12 },
        { "b#", 1 },
    }
.PP
.fi

.PP
Dictionary mapping of note names to note numbers\&. 
.nf
87     {
88         { "cb", 12 },
89         { "c", 1 },
90         { "c#", 2 },
91         { "db", 2 },
92         { "d", 3 },
93         { "d#", 4 },
94         { "eb", 4 },
95         { "e", 5 },
96         { "e#", 6 },
97         { "fb", 5 },
98         { "f", 6 },
99         { "f#", 7 },
100         { "gb", 7 },
101         { "g", 8 },
102         { "g#", 9 },
103         { "ab", 9 },
104         { "a", 10 },
105         { "a#", 11 },
106         { "bb", 11 },
107         { "b", 12 },
108         { "b#", 1 },
109     };
.PP
.fi

.PP
Referenced by \fBConvertNoteNameToNumber()\fP\&.
.SS "Transform GameManager\&.noteHolder\fR [private]\fP"

.PP
Referenced by \fBPrepareNotes()\fP\&.
.SS "string [] GameManager\&.noteNames = { 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', }\fR [private]\fP"

.PP
String array containing the names of notes accoring to their indecies, 0 being C\&. 
.nf
81 { "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", };
.PP
.fi

.PP
Referenced by \fBConvertNoteNumberToName()\fP\&.
.SS "GameObject GameManager\&.notePrefab"

.PP
prefab used for instantiating notes\&. 
.PP
Referenced by \fBPrepareNotes()\fP\&.
.SS "List<Coroutine> GameManager\&.readiedNotes = new()\fR [private]\fP"

.PP
List holding all note prepared but not yet spawned\&. 
.PP
Referenced by \fBPrepareNotes()\fP, and \fBStopReadiedNotes()\fP\&.
.SS "float GameManager\&.screenHeight\fR [private]\fP"

.PP
Height of the viewport in Units, as viewed from an angle in the game view\&. 
.PP
Referenced by \fBPrepareNotes()\fP\&.
.SS "\fBSongScore\fP GameManager\&.selectedSongHighScore"

.PP
\fBSongScore\fP storing the High score for the currently selected song\&. 
.SS "float GameManager\&.songTime"

.PP
Elapsed duration (seconds) into the currently playing song\&. 
.PP
Referenced by \fBPrepareNotes()\fP, and \fBUpdateSongTime()\fP\&.
.SS "float GameManager\&.spawnOffset = 2f\fR [private]\fP"

.PP
Referenced by \fBPrepareNotes()\fP\&.
.SS "bool GameManager\&.startTimer"

.PP
Should \fBsongTime\fP be updated? 
.PP
Referenced by \fBOnSongEnd()\fP, \fBPrepareNotes()\fP, \fBReturnToSongSelection()\fP, \fBStopSong()\fP, and \fBUpdateSongTime()\fP\&.
.SS "int GameManager\&.totalNotes"

.PP
Total number of notes in the currently playing song\&. 
.PP
Referenced by \fBOnSongEnd()\fP, and \fBSetSongTotalNotes()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for KiBoard GDD & Technical Documentation from the source code\&.
