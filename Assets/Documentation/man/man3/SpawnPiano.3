.TH "SpawnPiano" 3 "Version 1.0.0" "KiBoard GDD & Technical Documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SpawnPiano
.SH SYNOPSIS
.br
.PP
.PP
Inherits MonoBehaviour\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "int \fBGetIndexOfSpriteRenderer\fP (SpriteRenderer sr)"
.br
.RI "gets the index of a specific keys sprite renderer\&. "
.ti -1c
.RI "Color \fBGetDefaultKeyColour\fP (int i)"
.br
.RI "gets default colour for a key based on key number\&. "
.ti -1c
.RI "void \fBClearAllKeyColours\fP ()"
.br
.RI "resets colours of all keys on the keyboard\&. "
.ti -1c
.RI "void \fBUpdateKeyColours\fP (int noteNumber, bool enabled, string timingScore='')"
.br
.RI "Updates the colours of keys when notes are pressed based off of the timing score\&. "
.ti -1c
.RI "void \fBSpawnKeyParticle\fP (int keyNum, string score='')"
.br
.RI "spawn particle effect at pressed key\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static Color \fBGetKeyColour\fP (int keyNum, string timingScore='')"
.br
.RI "Get colour of a key based off of timing score\&. "
.ti -1c
.RI "static Color \fBGetKeyColour\fP (int keyNum, bool isKeyEnabled, string timingScore='')"
.br
.RI "Get colour of a key based off of timing score taking in to account notes being released\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBSpawnPiano\fP \fBinstance\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBAwake\fP ()"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBCheckBlackNote\fP (int i)"
.br
.RI "is the note at index I a black note? "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "GameObject \fBpianoWhiteTilePrefab\fP"
.br
.ti -1c
.RI "GameObject \fBkeyParticlePrefab\fP"
.br
.ti -1c
.RI "SpriteRenderer[] \fBspriterenderers\fP = new SpriteRenderer[88]"
.br
.RI "array of sprites for each key of the piano\&. "
.ti -1c
.RI "Color \fBlane1\fP"
.br
.RI "Lane colour 1\&. "
.ti -1c
.RI "Color \fBlane2\fP"
.br
.RI "lane colour 2\&. "
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static Color \fBenabledColour\fP = new Color(255, 0, 0, 128)"
.br
.RI "colour when incorrectly pressed/timed\&. "
.ti -1c
.RI "static Color \fBperfectColour\fP = new Color(255, 0, 195, 128)"
.br
.RI "colour when perfectly timed "
.ti -1c
.RI "static Color \fBgoodColour\fP = new Color(0\&.15f, 1, \&.5f, 128)"
.br
.RI "colour when pressed with good timing\&. "
.ti -1c
.RI "static Color \fBokayColour\fP = new Color(0, 9, 255, 128)"
.br
.RI "colour when pressed with okay timing\&. "
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "void SpawnPiano\&.Awake ()\fR [private]\fP"

.nf
42     {
43         if (instance == null) { instance = this; }
44         else { Destroy(instance\&.gameObject); }
45     }
.PP
.fi

.SS "static bool SpawnPiano\&.CheckBlackNote (int i)\fR [static]\fP, \fR [private]\fP"

.PP
is the note at index I a black note? 
.nf
95     {
96         int value = i % 12;   
97         if(GameSettings\&.usePiano) return value == 2 || value == 5 || value == 7 || value == 10 || (value == 0 && i != 0);
98         return value == 0 || value == 2 ||value == 5 || value == 7 || value == 10 ;
99 
100     }
.PP
.fi

.PP
Referenced by \fBGetDefaultKeyColour()\fP, and \fBGetKeyColour()\fP\&.
.SS "void SpawnPiano\&.ClearAllKeyColours ()"

.PP
resets colours of all keys on the keyboard\&. 
.nf
85     {
86         for (int i = 0; i < 88; i++)
87         {
88             spriterenderers[i]\&.color = GetDefaultKeyColour(i);
89         }
90     }
.PP
.fi

.SS "Color SpawnPiano\&.GetDefaultKeyColour (int i)"

.PP
gets default colour for a key based on key number\&. 
.PP
\fBParameters\fP
.RS 4
\fIi\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.nf
78     {
79         return CheckBlackNote(i + 1) ? Color\&.black : Color\&.white;
80     }
.PP
.fi

.PP
Referenced by \fBClearAllKeyColours()\fP\&.
.SS "int SpawnPiano\&.GetIndexOfSpriteRenderer (SpriteRenderer sr)"

.PP
gets the index of a specific keys sprite renderer\&. 
.PP
\fBParameters\fP
.RS 4
\fIsr\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.nf
69     {
70         return Array\&.IndexOf(spriterenderers, sr);
71     }
.PP
.fi

.SS "static Color SpawnPiano\&.GetKeyColour (int keyNum, bool isKeyEnabled, string timingScore = \fR''\fP)\fR [static]\fP"

.PP
Get colour of a key based off of timing score taking in to account notes being released\&. 
.nf
145     {
146 
147         if (!isKeyEnabled)
148         {
149             if (CheckBlackNote(keyNum + 1)) { return Color\&.black; }
150             else { return Color\&.white; }
151         }
152         switch (timingScore)
153         {
154             case "Perfect":
155                 return perfectColour;
156 
157             case "Good":
158                 return goodColour;
159 
160             case "Okay":
161                 return okayColour;
162             default:
163                 return enabledColour;
164 
165         }
166 
167     }
.PP
.fi

.SS "static Color SpawnPiano\&.GetKeyColour (int keyNum, string timingScore = \fR''\fP)\fR [static]\fP"

.PP
Get colour of a key based off of timing score\&. 
.nf
122     {
123         switch (timingScore)
124         {
125             case "Perfect":
126                 return perfectColour;
127 
128             case "Good":
129                 return goodColour;
130 
131             case "Okay":
132                 return okayColour;
133 
134             default:
135                 return enabledColour;
136 
137         }
138 
139     }
.PP
.fi

.PP
Referenced by \fBSpawnKeyParticle()\fP, and \fBUpdateKeyColours()\fP\&.
.SS "void SpawnPiano\&.SpawnKeyParticle (int keyNum, string score = \fR''\fP)"

.PP
spawn particle effect at pressed key\&. 
.PP
\fBParameters\fP
.RS 4
\fIkeyNum\fP key number to spawn the particles at\&.
.br
\fIscore\fP timing score used for colouring the particles\&.
.RE
.PP

.nf
175     {
176         ParticleSystem particle;
177         if (GameSettings\&.usePiano) { particle = Instantiate(keyParticlePrefab, spriterenderers[keyNum]\&.transform)\&.GetComponent<ParticleSystem>(); }
178         else { particle = Instantiate(keyParticlePrefab, spriterenderers[(keyNum\-3 )%12]\&.transform)\&.GetComponent<ParticleSystem>(); }
179         particle\&.transform\&.position += Vector3\&.up / 2;
180         ParticleSystem\&.MainModule main = particle\&.main;
181         main\&.startColor = GetKeyColour(keyNum, score);
182         particle\&.Play();
183         Destroy(particle, 5f);
184     }
.PP
.fi

.SS "void SpawnPiano\&.UpdateKeyColours (int noteNumber, bool enabled, string timingScore = \fR''\fP)"

.PP
Updates the colours of keys when notes are pressed based off of the timing score\&. 
.PP
\fBParameters\fP
.RS 4
\fInoteNumber\fP note number of the note pressed\&.
.br
\fIenabled\fP is the note being enabled or disabled?
.br
\fItimingScore\fP timing score of the note\&.
.RE
.PP

.nf
108     {
109         if (GameSettings\&.usePiano)
110         {
111             spriterenderers[noteNumber]\&.color = GetKeyColour(noteNumber, enabled, timingScore);
112         }
113         else
114         {
115             spriterenderers[(noteNumber\-3 )% 12]\&.color = GetKeyColour(noteNumber, enabled, timingScore);
116         }
117     }
.PP
.fi

.SH "Member Data Documentation"
.PP 
.SS "Color SpawnPiano\&.enabledColour = new Color(255, 0, 0, 128)\fR [static]\fP, \fR [private]\fP"

.PP
colour when incorrectly pressed/timed\&. 
.PP
Referenced by \fBGetKeyColour()\fP, and \fBGetKeyColour()\fP\&.
.SS "Color SpawnPiano\&.goodColour = new Color(0\&.15f, 1, \&.5f, 128)\fR [static]\fP, \fR [private]\fP"

.PP
colour when pressed with good timing\&. 
.PP
Referenced by \fBGetKeyColour()\fP, and \fBGetKeyColour()\fP\&.
.SS "\fBSpawnPiano\fP SpawnPiano\&.instance\fR [static]\fP"

.PP
Referenced by \fBSongNoteEditor\&.AddNote()\fP, \fBAwake()\fP, \fBMidiInput\&.NoteOff()\fP, \fBMidiInput\&.NoteOn()\fP, \fBMidiInput\&.OnNoteSuccess()\fP, and \fBMidiInput\&.PedalStateChanged()\fP\&.
.SS "GameObject SpawnPiano\&.keyParticlePrefab\fR [private]\fP"

.PP
Referenced by \fBSpawnKeyParticle()\fP\&.
.SS "Color SpawnPiano\&.lane1\fR [private]\fP"

.PP
Lane colour 1\&. 
.SS "Color SpawnPiano\&.lane2\fR [private]\fP"

.PP
lane colour 2\&. 
.SS "Color SpawnPiano\&.okayColour = new Color(0, 9, 255, 128)\fR [static]\fP, \fR [private]\fP"

.PP
colour when pressed with okay timing\&. 
.PP
Referenced by \fBGetKeyColour()\fP, and \fBGetKeyColour()\fP\&.
.SS "Color SpawnPiano\&.perfectColour = new Color(255, 0, 195, 128)\fR [static]\fP, \fR [private]\fP"

.PP
colour when perfectly timed 
.PP
Referenced by \fBGetKeyColour()\fP, and \fBGetKeyColour()\fP\&.
.SS "GameObject SpawnPiano\&.pianoWhiteTilePrefab\fR [private]\fP"

.SS "SpriteRenderer [] SpawnPiano\&.spriterenderers = new SpriteRenderer[88]\fR [private]\fP"

.PP
array of sprites for each key of the piano\&. 
.PP
Referenced by \fBClearAllKeyColours()\fP, \fBGetIndexOfSpriteRenderer()\fP, \fBSpawnKeyParticle()\fP, and \fBUpdateKeyColours()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for KiBoard GDD & Technical Documentation from the source code\&.
