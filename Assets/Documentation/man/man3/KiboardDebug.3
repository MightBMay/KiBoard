.TH "KiboardDebug" 3 "Version 1.0.0" "KiBoard GDD & Technical Documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KiboardDebug
.SH SYNOPSIS
.br
.PP
.PP
Inherits MonoBehaviour\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBOnEnable\fP ()"
.br
.ti -1c
.RI "void \fBVolumeOverride\fP (bool enabled)"
.br
.RI "Override the volume of all music played\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBShowDebugMenu\fP ()"
.br
.RI "show the debug canvas\&. "
.ti -1c
.RI "static void \fBHideDebugMenu\fP ()"
.br
.RI "hide the debug canvas\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBKiboardDebug\fP \fBinstance\fP"
.br
.ti -1c
.RI "static bool \fBoverideVolume\fP = false"
.br
.RI "Is game currently overriding the volume\&. "
.ti -1c
.RI "static float \fBoverideVolumeValue\fP"
.br
.RI "Volume value at which to override\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "static bool \fBisMidiConnected\fP\fR [get]\fP"
.br
.RI "Returns true if any midi device is detected\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "static int \fBmidiInGetNumDevs\fP ()"
.br
.ti -1c
.RI "void \fBAwake\fP ()"
.br
.ti -1c
.RI "void \fBUpdate\fP ()"
.br
.ti -1c
.RI "void \fBCheckOpenMenu\fP ()"
.br
.RI "check if the open/close menu hotkey is set\&. "
.ti -1c
.RI "void \fBOnDisable\fP ()"
.br
.ti -1c
.RI "IEnumerator \fBMonitorMidiDevices\fP ()"
.br
.RI "begin checking if there is a connected midi device\&. "
.ti -1c
.RI "IEnumerator \fBCalculateFPS\fP ()"
.br
.RI "begin calculating Fps\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "Toggle \fBmidiConnectedToggle\fP"
.br
.ti -1c
.RI "Text \fBfpsText\fP"
.br
.ti -1c
.RI "InputField \fBvolumeOverrideIF\fP"
.br
.ti -1c
.RI "GameObject \fBparent\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static Canvas \fBdebugCanvas\fP"
.br
.RI "canvas containing Debug UI "
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "void KiboardDebug\&.Awake ()\fR [private]\fP"

.nf
57     {
58         if (instance == null)
59         {
60             instance = this;
61             DontDestroyOnLoad(parent);
62             debugCanvas = GetComponent<Canvas>();
63         }
64         else { Destroy(this); }
65         
66     }
.PP
.fi

.SS "IEnumerator KiboardDebug\&.CalculateFPS ()\fR [private]\fP"

.PP
begin calculating Fps\&. 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.nf
114     {
115         while (true)
116         {
117             yield return new WaitForSeconds(0\&.1f);
118             
119             try { fpsText\&.text = $"FPS:  {Mathf\&.Round(10 / Time\&.deltaTime )/10}"; } // calculate fps and assign to text\&.
120             catch { Debug\&.LogWarning("Assigning Fps to Debug menu's fpsText encountered an error\&."); yield break; }
121 
122         }
123     }
.PP
.fi

.PP
Referenced by \fBOnEnable()\fP\&.
.SS "void KiboardDebug\&.CheckOpenMenu ()\fR [private]\fP"

.PP
check if the open/close menu hotkey is set\&. 
.nf
76     {
77         if (Input\&.GetKey(KeyCode\&.LeftAlt)  && Input\&.GetKeyDown(KeyCode\&.F1))
78         {
79             if (debugCanvas\&.enabled) { HideDebugMenu(); }
80             else { ShowDebugMenu(); }
81         }
82         
83     }
.PP
.fi

.PP
Referenced by \fBUpdate()\fP\&.
.SS "static void KiboardDebug\&.HideDebugMenu ()\fR [static]\fP"

.PP
hide the debug canvas\&. 
.nf
160     {
161         debugCanvas\&.enabled = false;
162     }
.PP
.fi

.PP
Referenced by \fBCheckOpenMenu()\fP\&.
.SS "static int KiboardDebug\&.midiInGetNumDevs ()\fR [private]\fP"

.SS "IEnumerator KiboardDebug\&.MonitorMidiDevices ()\fR [private]\fP"

.PP
begin checking if there is a connected midi device\&. 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.nf
101     {
102         while (true)
103         {
104             yield return new WaitForSeconds(0\&.1f);
105             try { midiConnectedToggle\&.isOn = isMidiConnected; }
106             catch { Debug\&.LogWarning("MidiConnectedToggle was null"); yield break; }
107         }
108     }
.PP
.fi

.PP
Referenced by \fBOnEnable()\fP\&.
.SS "void KiboardDebug\&.OnDisable ()\fR [private]\fP"

.nf
92     {
93         StopAllCoroutines();
94     }
.PP
.fi

.SS "void KiboardDebug\&.OnEnable ()"

.nf
87     {
88         StartCoroutine(CalculateFPS());
89         StartCoroutine(MonitorMidiDevices());
90     }
.PP
.fi

.SS "static void KiboardDebug\&.ShowDebugMenu ()\fR [static]\fP"

.PP
show the debug canvas\&. 
.nf
153     {
154         debugCanvas\&.enabled = true;
155     }
.PP
.fi

.PP
Referenced by \fBCheckOpenMenu()\fP\&.
.SS "void KiboardDebug\&.Update ()\fR [private]\fP"

.nf
69     {
70         CheckOpenMenu();
71     }
.PP
.fi

.SS "void KiboardDebug\&.VolumeOverride (bool enabled)"

.PP
Override the volume of all music played\&. 
.PP
\fBParameters\fP
.RS 4
\fIenabled\fP is the volume override enabled?
.RE
.PP

.nf
130     {
131         if (enabled)
132         {
133             if (!int\&.TryParse(volumeOverrideIF\&.text, out int newValue))
134             {
135                 Debug\&.LogWarning("Error Parsing Volume Override Value");
136             }
137             else
138             {
139                 MP3Handler\&.instance\&.SetVolume( PlayerSettings\&.musicVolume = Math\&.Clamp(newValue, 0, 100) ); 
140                 overideVolume = true;
141             }
142         }
143         else
144         {
145             overideVolume = false;
146         }
147 
148     }
.PP
.fi

.SH "Member Data Documentation"
.PP 
.SS "Canvas KiboardDebug\&.debugCanvas\fR [static]\fP, \fR [private]\fP"

.PP
canvas containing Debug UI 
.PP
Referenced by \fBAwake()\fP, and \fBCheckOpenMenu()\fP\&.
.SS "Text KiboardDebug\&.fpsText\fR [private]\fP"

.SS "\fBKiboardDebug\fP KiboardDebug\&.instance\fR [static]\fP"

.PP
Referenced by \fBAwake()\fP\&.
.SS "Toggle KiboardDebug\&.midiConnectedToggle\fR [private]\fP"

.SS "bool KiboardDebug\&.overideVolume = false\fR [static]\fP"

.PP
Is game currently overriding the volume\&. 
.PP
Referenced by \fBVolumeOverride()\fP\&.
.SS "float KiboardDebug\&.overideVolumeValue\fR [static]\fP"

.PP
Volume value at which to override\&. 
.SS "GameObject KiboardDebug\&.parent\fR [private]\fP"

.PP
Referenced by \fBAwake()\fP\&.
.SS "InputField KiboardDebug\&.volumeOverrideIF\fR [private]\fP"

.PP
Referenced by \fBVolumeOverride()\fP\&.
.SH "Property Documentation"
.PP 
.SS "bool KiboardDebug\&.isMidiConnected\fR [static]\fP, \fR [get]\fP"

.PP
Returns true if any midi device is detected\&. 
.nf
30     {
31         get
32         {
33             return midiInGetNumDevs() > 0;
34         }
35     }
.PP
.fi

.PP
Referenced by \fBMidiInput\&.LoadSongFromCurrentSettings()\fP, \fBGameSettingsMenu\&.MonitorMidiConnections()\fP, and \fBMonitorMidiDevices()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for KiBoard GDD & Technical Documentation from the source code\&.
