.TH "NoteEventInfo" 3 "Version 1.0.0" "KiBoard GDD & Technical Documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NoteEventInfo \- Class containing all info needed to play a note\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNoteEventInfo\fP ()"
.br
.ti -1c
.RI "\fBNoteEventInfo\fP (int \fBnoteNumber\fP, float \fBstartTime\fP, float \fBendTime\fP)"
.br
.ti -1c
.RI "\fBNoteEventInfo\fP (float bpm)"
.br
.RI "Override to set bpm this way so that i don't need to make a seperate class and implement it, OR store a bpm float with every note\&. just be sure to check start time when processing them\&. "
.ti -1c
.RI "float \fBGetDuration\fP ()"
.br
.RI "Calculate duration of note\&. "
.ti -1c
.RI "void \fBSetStartEndTime\fP (float start, float end)"
.br
.RI "sets start and end time\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "int \fBnoteNumber\fP"
.br
.RI "Number of the note ranging from 0-87 coinciding with the notes on a piano\&. "
.ti -1c
.RI "float \fBstartTime\fP"
.br
.RI "starting time of the note\&. "
.ti -1c
.RI "float \fBendTime\fP"
.br
.RI "release time of the note\&. "
.ti -1c
.RI "bool \fBtriggered\fP"
.br
.RI "Has this note been triggered already? "
.in -1c
.SH "Detailed Description"
.PP 
Class containing all info needed to play a note\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "NoteEventInfo\&.NoteEventInfo ()"

.nf
33     {
34 
35     }
.PP
.fi

.SS "NoteEventInfo\&.NoteEventInfo (int noteNumber, float startTime, float endTime)"

.nf
38     {
39         this\&.noteNumber = noteNumber;
40         this\&.startTime = startTime;
41         this\&.endTime = endTime;
42         this\&.triggered = false;
43     }
.PP
.fi

.SS "NoteEventInfo\&.NoteEventInfo (float bpm)"

.PP
Override to set bpm this way so that i don't need to make a seperate class and implement it, OR store a bpm float with every note\&. just be sure to check start time when processing them\&. 
.PP
\fBParameters\fP
.RS 4
\fIBpm\fP new bpm to set to when note is processed\&.
.RE
.PP

.nf
51     {
52         this\&.noteNumber = int\&.MinValue;
53         this\&.startTime = float\&.NegativeInfinity;
54         this\&.endTime = bpm;
55         this\&.triggered = false;
56     }
.PP
.fi

.SH "Member Function Documentation"
.PP 
.SS "float NoteEventInfo\&.GetDuration ()"

.PP
Calculate duration of note\&. 
.PP
\fBReturns\fP
.RS 4
Float containing note duration\&.
.RE
.PP

.nf
63     {
64         return endTime \- startTime;
65     }
.PP
.fi

.PP
Referenced by \fBSongNoteEditor\&.UpdateStartEndTimes()\fP\&.
.SS "void NoteEventInfo\&.SetStartEndTime (float start, float end)"

.PP
sets start and end time\&. 
.PP
\fBParameters\fP
.RS 4
\fIstart\fP new start time\&.
.br
\fIend\fP new end time\&.
.RE
.PP

.nf
72     {
73         startTime = start;
74         endTime = end;
75     }
.PP
.fi

.PP
Referenced by \fBSongNoteEditor\&.UpdateStartEndTimes()\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "float NoteEventInfo\&.endTime"

.PP
release time of the note\&. 
.PP
Referenced by \fBGetDuration()\fP, \fBNoteEventInfo()\fP, \fBGameManager\&.PrepareNotes()\fP, \fBSongNoteEditor\&.RescaleNotesFromBPM()\fP, \fBSongNoteEditor\&.ScaleNote()\fP, and \fBSetStartEndTime()\fP\&.
.SS "int NoteEventInfo\&.noteNumber"

.PP
Number of the note ranging from 0-87 coinciding with the notes on a piano\&. 
.PP
Referenced by \fBGameManager\&.CheckSpawnNote()\fP, \fBSongNoteEditor\&.ConvertNoteEventToNotePosition()\fP, \fBNoteEventInfo()\fP, \fBGameManager\&.PrepareNotes()\fP, and \fBEditorNote\&.SetNotePosition()\fP\&.
.SS "float NoteEventInfo\&.startTime"

.PP
starting time of the note\&. 
.PP
Referenced by \fBGameManager\&.CheckSpawnNote()\fP, \fBSongNoteEditor\&.ConvertNoteEventToNotePosition()\fP, \fBGetDuration()\fP, \fBNoteEventInfo()\fP, \fBMidiInput\&.NoteOn()\fP, \fBGameManager\&.PrepareNotes()\fP, \fBSongNoteEditor\&.RescaleNotesFromBPM()\fP, \fBSongNoteEditor\&.ScaleNote()\fP, and \fBSetStartEndTime()\fP\&.
.SS "bool NoteEventInfo\&.triggered"

.PP
Has this note been triggered already? 

.SH "Author"
.PP 
Generated automatically by Doxygen for KiBoard GDD & Technical Documentation from the source code\&.
