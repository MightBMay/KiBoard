.TH "GameUI" 3 "Version 1.0.0" "KiBoard GDD & Technical Documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GameUI
.SH SYNOPSIS
.br
.PP
.PP
Inherits MonoBehaviour\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBCreateTimingText\fP (int score, string scoretext)"
.br
.RI "creates a different timing text based on the timing score\&. "
.ti -1c
.RI "void \fBSetComboBarValue\fP (float value)"
.br
.RI "sets the value of the combo bar slider based off of the current combo's multiplier\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBGameUI\fP \fBinstance\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBAwake\fP ()"
.br
.ti -1c
.RI "void \fBUpdate\fP ()"
.br
.ti -1c
.RI "void \fBSpawnTimingText\fP (string score, Color color)"
.br
.RI "spawns timing score text above the score\&. "
.ti -1c
.RI "IEnumerator \fBFadeoutDestroy\fP (TextMeshProUGUI textMesh)"
.br
.RI "Fades out the alpha of text object and destroys the text's gameObject after a delay\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "GameObject \fBtextPrefab\fP"
.br
.ti -1c
.RI "float \fBfadeoutTimer\fP"
.br
.ti -1c
.RI "TextMeshProUGUI \fBscoreText\fP"
.br
.ti -1c
.RI "TextMeshProUGUI \fBcomboText\fP"
.br
.ti -1c
.RI "Slider \fBcomboBar\fP"
.br
.ti -1c
.RI "Gradient \fBcomboGradient\fP"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "void GameUI\&.Awake ()\fR [private]\fP"

.nf
17     {
18         if (instance == null)
19         {
20             instance = this;
21         }
22         else { Destroy(this); }
23     }
.PP
.fi

.SS "void GameUI\&.CreateTimingText (int score, string scoretext)"

.PP
creates a different timing text based on the timing score\&. 
.nf
74     {
75         switch (scoretext)
76         {
77             case "Perfect":
78                 SpawnTimingText("+" + score\&.ToString(), new Color(1, 0, 0\&.75f, \&.5f));
79                 break;
80 
81             case "Good":
82                 SpawnTimingText("+" + score\&.ToString(), new Color(0\&.15f, 1, \&.5f, \&.5f));
83                 break;
84 
85             case "Okay":
86                 SpawnTimingText("+" + score\&.ToString(), new Color(0, 0\&.04f, 1, \&.5f));
87                 break;
88             default:
89                 SpawnTimingText((\-10)\&.ToString(), new Color(1, 0, 0, \&.5f));
90                 break;
91         }
92         scoreText\&.text = GameManager\&.instance\&.currentSongScore\&.score\&.ToString();
93     }
.PP
.fi

.SS "IEnumerator GameUI\&.FadeoutDestroy (TextMeshProUGUI textMesh)\fR [private]\fP"

.PP
Fades out the alpha of text object and destroys the text's gameObject after a delay\&. 
.PP
\fBParameters\fP
.RS 4
\fItextMesh\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.nf
48     {
49         Color startColor = textMesh\&.color; // Get the initial color
50         Color targetColor = new(startColor\&.r, startColor\&.g, startColor\&.b, 0); // Target color with alpha set to 0
51 
52         float elapsedTime = 0f;
53 
54         while (elapsedTime < fadeoutTimer)
55         {
56             Color temp;
57             // Assign the new color back to the TextMeshProUGUI
58             textMesh\&.color = temp = Color\&.Lerp(startColor, targetColor, elapsedTime / fadeoutTimer);
59             elapsedTime += Time\&.deltaTime;
60 
61             yield return null;
62         }
63 
64         // Ensure that the final color is set to the targetColor
65         textMesh\&.color = targetColor;
66 
67         // Perform any other actions or destroy the TextMeshProUGUI object
68         Destroy(textMesh\&.gameObject);
69     }
.PP
.fi

.PP
Referenced by \fBSpawnTimingText()\fP\&.
.SS "void GameUI\&.SetComboBarValue (float value)"

.PP
sets the value of the combo bar slider based off of the current combo's multiplier\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP 
.RE
.PP

.nf
99     {
100         // Assuming the input value ranges from 1 to 3
101         float normalizedValue = (value \- 1) / (3 \- 1);
102         float roundedNormalizedValue = Mathf\&.Round(value * 10) / 10;
103         comboBar\&.value = normalizedValue;
104         ColorBlock newColours = new ColorBlock();
105         newColours\&.disabledColor = comboGradient\&.Evaluate(normalizedValue);
106         newColours\&.colorMultiplier = 1;
107         comboBar\&.colors = newColours;
108         comboText\&.text = (roundedNormalizedValue)\&.ToString() + "X";
109     }
.PP
.fi

.PP
Referenced by \fBUpdate()\fP\&.
.SS "void GameUI\&.SpawnTimingText (string score, Color color)\fR [private]\fP"

.PP
spawns timing score text above the score\&. 
.PP
\fBParameters\fP
.RS 4
\fIscore\fP numeric change in score
.br
\fIcolor\fP colour of the text
.RE
.PP

.nf
34     {
35         TextMeshProUGUI text = Instantiate(textPrefab, transform)\&.GetComponent<TextMeshProUGUI>();
36         text\&.text = score;
37         text\&.color = color;
38         text\&.transform\&.SetAsLastSibling();
39         StartCoroutine(FadeoutDestroy(text));
40 
41     }
.PP
.fi

.PP
Referenced by \fBCreateTimingText()\fP\&.
.SS "void GameUI\&.Update ()\fR [private]\fP"

.nf
25     {
26         SetComboBarValue(GameManager\&.instance\&.combo\&.multiplier);
27     }
.PP
.fi

.SH "Member Data Documentation"
.PP 
.SS "Slider GameUI\&.comboBar\fR [private]\fP"

.SS "Gradient GameUI\&.comboGradient\fR [private]\fP"

.PP
Referenced by \fBSetComboBarValue()\fP\&.
.SS "TextMeshProUGUI GameUI\&.comboText\fR [private]\fP"

.SS "float GameUI\&.fadeoutTimer\fR [private]\fP"

.PP
Referenced by \fBFadeoutDestroy()\fP\&.
.SS "\fBGameUI\fP GameUI\&.instance\fR [static]\fP"

.PP
Referenced by \fBSongScore\&.AddScore()\fP, \fBAwake()\fP, and \fBCombo\&.ChangeMultiplier()\fP\&.
.SS "TextMeshProUGUI GameUI\&.scoreText\fR [private]\fP"

.SS "GameObject GameUI\&.textPrefab\fR [private]\fP"

.PP
Referenced by \fBSpawnTimingText()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for KiBoard GDD & Technical Documentation from the source code\&.
