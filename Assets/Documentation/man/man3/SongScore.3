.TH "SongScore" 3 "Version 1.0.0" "KiBoard GDD & Technical Documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SongScore
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "float \fBGetNotePercentage\fP (int noteCount)"
.br
.RI "Calculates percentage of notes hit\&. "
.ti -1c
.RI "int[] \fBGetScoreArray\fP (int noteCount)"
.br
.RI "Combines score quantities of note scores hit into an int array\&. "
.ti -1c
.RI "void \fBAddScore\fP (string Score)"
.br
.RI "add a note to the song score\&. "
.ti -1c
.RI "void \fBClearScore\fP ()"
.br
.RI "resets score values to 0\&. "
.ti -1c
.RI "bool \fBFinalizeScore\fP ()"
.br
.RI "Finishes processing score values and checks if any high scores are achieved\&. if so, writes them to a score file\&. "
.ti -1c
.RI "void \fBWriteScoreToJson\fP (string filename)"
.br
.RI "writes score file to Json with given name in the \fBFileGroup\&.FolderPath\fP of the currently selected song\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSongScore\fP \fBReadFieldsFromJsonFile\fP (string filePath)"
.br
.RI "Reads a \&.score file from a given path\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "DateTime \fBtimeSet\fP"
.br
.RI "Time stamp of when score was performed\&. "
.ti -1c
.RI "int \fBscore\fP"
.br
.RI "total score\&. "
.ti -1c
.RI "int \fBperfect\fP"
.br
.RI "number of perfect notes "
.ti -1c
.RI "int \fBgood\fP"
.br
.RI "number of good notes "
.ti -1c
.RI "int \fBokay\fP"
.br
.RI "number of okay notes "
.ti -1c
.RI "int \fBextra\fP"
.br
.RI "number of extra notes "
.ti -1c
.RI "int \fBmiss\fP"
.br
.RI "number of missd notes "
.ti -1c
.RI "float \fBnoteAccuracy\fP"
.br
.RI "percentage of notes hit with okay or better scoring\&. "
.ti -1c
.RI "int \fBhighestCombo\fP"
.br
.RI "longest string of notes hit without dropping the combo\&. "
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "void SongScore\&.AddScore (string Score)"

.PP
add a note to the song score\&. 
.PP
\fBParameters\fP
.RS 4
\fIScore\fP String score for the note
.br
\fImultiplier\fP Current multiplier
.RE
.PP

.nf
76     {
77         int scoreChange = 0;
78         switch (Score)
79         {
80             case "Perfect":
81                 perfect++;
82                 scoreChange = (250);
83                 break;
84 
85             case "Good":
86                 good++;
87                 scoreChange = (150);
88                 break;
89 
90             case "Okay":
91                 okay++;
92                 scoreChange = (75);
93                 break;
94             default:
95                 extra++;
96                 scoreChange = \-100;
97                 CameraShake\&.ShakeCamera(2\&.5f, 0\&.1f);
98                 break;
99 
100 
101         }
102         int finalScoreChange = (int)(scoreChange * GameManager\&.instance\&.combo\&.multiplier);
103         score += finalScoreChange;
104         GameUI\&.instance\&.CreateTimingText(finalScoreChange, Score);
105     }
.PP
.fi

.PP
Referenced by \fBGameManager\&.UpdatePlayerScore()\fP\&.
.SS "void SongScore\&.ClearScore ()"

.PP
resets score values to 0\&. 
.nf
110     {
111         score = 0;
112         perfect = 0;
113         good = 0;
114         okay = 0;
115         extra = 0;
116         miss = 0;
117         highestCombo = 0;
118     }
.PP
.fi

.SS "bool SongScore\&.FinalizeScore ()"

.PP
Finishes processing score values and checks if any high scores are achieved\&. if so, writes them to a score file\&. 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.nf
124     {
125         bool writeScore = false;
126         SongScore savedScores = GameManager\&.instance?\&.selectedSongHighScore ?? new SongScore();
127         int curHighestCombo = GameManager\&.instance\&.combo\&.highestCount;
128         timeSet = System\&.DateTime\&.Now;
129         noteAccuracy = GetNotePercentage(GameManager\&.instance\&.totalNotes);
130         if (score > savedScores\&.score) { writeScore = true; }
131         if (savedScores\&.highestCombo > curHighestCombo) { highestCombo = savedScores\&.highestCombo; }
132         else { highestCombo = curHighestCombo; writeScore = true; }
133         if (writeScore) WriteScoreToJson(GameSettings\&.currentFileGroup\&.FolderPath);
134         
135         return writeScore;
136 
137     }
.PP
.fi

.PP
Referenced by \fBGameManager\&.OnSongEnd()\fP\&.
.SS "float SongScore\&.GetNotePercentage (int noteCount)"

.PP
Calculates percentage of notes hit\&. 
.PP
\fBParameters\fP
.RS 4
\fInoteCount\fP total number of notes\&.
.RE
.PP
\fBReturns\fP
.RS 4
percent accuracy\&.
.RE
.PP

.nf
50     {
51         if (noteCount == 0) { return Mathf\&.NegativeInfinity; }
52         return (perfect + good + okay) / noteCount * 100;
53     }
.PP
.fi

.PP
Referenced by \fBFinalizeScore()\fP\&.
.SS "int[] SongScore\&.GetScoreArray (int noteCount)"

.PP
Combines score quantities of note scores hit into an int array\&. 
.PP
\fBParameters\fP
.RS 4
\fInoteCount\fP total number of notes\&.
.RE
.PP
\fBReturns\fP
.RS 4
Array containing score, and quantities of note types\&.
.RE
.PP

.nf
60     {
61         int[] scores = new int[6];
62         scores[0] = score;
63         scores[1] = perfect;
64         scores[2] = good;
65         scores[3] = okay;
66         scores[4] = extra;
67         scores[5] = noteCount \- (perfect + good + okay);
68         return scores;
69     }
.PP
.fi

.PP
Referenced by \fBGameManager\&.OnSongEnd()\fP\&.
.SS "static \fBSongScore\fP SongScore\&.ReadFieldsFromJsonFile (string filePath)\fR [static]\fP"

.PP
Reads a \&.score file from a given path\&. 
.nf
165     {
166 
167         try
168         {
169             // Check if the file exists
170             if (File\&.Exists(filePath) && !string\&.IsNullOrEmpty(filePath))
171             {
172                 // Read the JSON string from the file
173                 string json = File\&.ReadAllText(filePath);
174 
175                 // Deserialize the JSON string into a SongScore object
176                 return JsonUtility\&.FromJson<SongScore>(json);
177             }
178             else
179             {
180                 Debug\&.Log($"Score File '{filePath}' does not exist\&.");
181                 return null;
182             }
183         }
184         catch (Exception ex)
185         {
186             Debug\&.LogError($"Error reading fields from JSON file: {ex\&.Message}");
187             return null;
188         }
189     }
.PP
.fi

.SS "void SongScore\&.WriteScoreToJson (string filename)"

.PP
writes score file to Json with given name in the \fBFileGroup\&.FolderPath\fP of the currently selected song\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP 
.RE
.PP

.nf
143     {
144         Debug\&.Log(filename);
145         try
146         {
147             // Serialize the object to JSON format
148             string json = JsonUtility\&.ToJson(this);
149             string filePath = filename +"/"+ GameSettings\&.currentFileGroup\&.FileName + "\&.score";
150 
151 
152             // Write the JSON string to the file
153             File\&.WriteAllText(filePath, json);
154 
155         }
156         catch (Exception ex)
157         {
158             Debug\&.LogError($"Error writing fields to JSON file: {ex\&.Message}");
159         }
160     }
.PP
.fi

.PP
Referenced by \fBFinalizeScore()\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "int SongScore\&.extra"

.PP
number of extra notes 
.PP
Referenced by \fBAddScore()\fP, \fBClearScore()\fP, and \fBGetScoreArray()\fP\&.
.SS "int SongScore\&.good"

.PP
number of good notes 
.PP
Referenced by \fBAddScore()\fP, \fBClearScore()\fP, \fBGetNotePercentage()\fP, and \fBGetScoreArray()\fP\&.
.SS "int SongScore\&.highestCombo"

.PP
longest string of notes hit without dropping the combo\&. 
.PP
Referenced by \fBClearScore()\fP, and \fBFinalizeScore()\fP\&.
.SS "int SongScore\&.miss"

.PP
number of missd notes 
.PP
Referenced by \fBClearScore()\fP\&.
.SS "float SongScore\&.noteAccuracy"

.PP
percentage of notes hit with okay or better scoring\&. 
.PP
Referenced by \fBFinalizeScore()\fP\&.
.SS "int SongScore\&.okay"

.PP
number of okay notes 
.PP
Referenced by \fBAddScore()\fP, \fBClearScore()\fP, \fBGetNotePercentage()\fP, and \fBGetScoreArray()\fP\&.
.SS "int SongScore\&.perfect"

.PP
number of perfect notes 
.PP
Referenced by \fBAddScore()\fP, \fBClearScore()\fP, \fBGetNotePercentage()\fP, and \fBGetScoreArray()\fP\&.
.SS "int SongScore\&.score"

.PP
total score\&. 
.PP
Referenced by \fBAddScore()\fP, \fBClearScore()\fP, \fBFinalizeScore()\fP, and \fBGetScoreArray()\fP\&.
.SS "DateTime SongScore\&.timeSet"

.PP
Time stamp of when score was performed\&. 
.PP
Referenced by \fBFinalizeScore()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for KiBoard GDD & Technical Documentation from the source code\&.
